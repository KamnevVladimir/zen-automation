import Vapor

func routes(_ app: Application) throws {
    // Health check –¥–ª—è Railway
    app.get("health") { req async -> HTTPStatus in
        return .ok
    }
    
    // API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    app.get { req async throws -> Response in
        let info = [
            "service": "zen-automation",
            "version": "1.0.0",
            "status": "running",
            "timestamp": ISO8601DateFormatter().string(from: Date())
        ]
        return try await info.encodeResponse(for: req)
    }
    
    // API –º–∞—Ä—à—Ä—É—Ç—ã
    let api = app.grouped("api", "v1")
    
    // –ü–æ—Å—Ç—ã
    api.get("posts") { req async throws -> [ZenPostModel] in
        try await ZenPostModel.query(on: req.db)
            .sort(\.$publishedAt, .descending)
            .limit(20)
            .all()
    }
    
    // –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    api.post("generate") { req async throws -> Response in
        let contentGenerator = ContentGeneratorService(
            aiClient: AnthropicClient(client: req.application.client, logger: req.application.logger),
            validator: ContentValidator(),
            logger: req.application.logger
        )
        let notifier = TelegramNotifier(client: req.application.client, logger: req.application.logger)
        let publisher = ZenPublisher(logger: req.application.logger, notifier: notifier)
        
        // –°–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        let request = GenerationRequest(
            templateType: .destination,
            topic: "–ö—É–¥–∞ –ø–æ–ª–µ—Ç–µ—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ",
            destinations: ["–¢—É—Ä—Ü–∏—è", "–ï–≥–∏–ø–µ—Ç"],
            priceData: nil,
            trendData: nil
        )
        
        do {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
            let response = try await contentGenerator.generatePost(
                request: request,
                db: req.db
            )
            
            // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            guard let post = try await ZenPostModel.find(response.postId, on: req.db) else {
                throw Abort(.notFound, reason: "Post not found")
            }
            
            let publishResult = try await publisher.publish(post: post, db: req.db)
            
            let result = [
                "success": true,
                "post_id": response.postId.uuidString,
                "zen_article_id": publishResult.zenArticleId ?? "N/A",
                "message": "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω"
            ]
            
            return try await result.encodeResponse(for: req)
            
        } catch {
            let result = [
                "success": false,
                "error": error.localizedDescription
            ]
            
            try? await notifier.sendError(error: "–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: \(error.localizedDescription)")
            return try await result.encodeResponse(for: req)
        }
    }
    
    // –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–º–æ-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    api.post("promote") { req async throws -> Response in
        let engagementService = ZenWebScraper(
            client: req.application.client,
            logger: req.application.logger
        )
        
        do {
            // –ò—â–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            let posts = try await engagementService.findPostsForCommenting(
                keywords: PromotionConfig.searchKeywords
            )
            
            // –ò—â–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
            var totalQuestions = 0
            for post in posts.prefix(2) {
                let questions = try await engagementService.findQuestionsInComments(postUrl: post.url)
                totalQuestions += questions.count
            }
            
            let result = [
                "success": true,
                "posts_found": posts.count,
                "questions_found": totalQuestions,
                "message": "–ü—Ä–æ–º–æ-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
            ]
            
            return try await result.encodeResponse(for: req)
            
        } catch {
            let result = [
                "success": false,
                "error": error.localizedDescription
            ]
            
            return try await result.encodeResponse(for: req)
        }
    }
    
    // –ú–µ—Ç—Ä–∏–∫–∏
    api.get("metrics") { req async throws -> Response in
        let totalPosts = try await ZenPostModel.query(on: req.db).count()
        let publishedPosts = try await ZenPostModel.query(on: req.db)
            .filter(\.$status, .equal, PostStatus.published)
            .count()
        
        struct MetricsResponse: Content {
            let total_posts: Int
            let published_posts: Int
            let success_rate: Double
        }
        
        let metrics = MetricsResponse(
            total_posts: totalPosts,
            published_posts: publishedPosts,
            success_rate: totalPosts > 0 ? Double(publishedPosts) / Double(totalPosts) : 0.0
        )
        
        return try await metrics.encodeResponse(for: req)
    }
    
    // RSS Feed –¥–ª—è T-Journal
    api.get("rss") { req async throws -> Response in
        let posts = try await ZenPostModel.query(on: req.db)
            .filter(\.$status, .equal, PostStatus.published)
            .sort(\.$publishedAt, .descending)
            .limit(20)
            .all()
        
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "EEE, dd MMM yyyy HH:mm:ss Z"
        dateFormatter.locale = Locale(identifier: "en_US_POSIX")
        
        let rssItems = posts.map { post in
            let pubDate = dateFormatter.string(from: post.publishedAt ?? post.createdAt ?? Date())
            return """
            <item>
                <title><![CDATA[\(post.title)]]></title>
                <description><![CDATA[\((post.shortPost ?? post.fullPost ?? "").prefix(500))...]]></description>
                <link>https://t.me/gdeTravel</link>
                <pubDate>\(pubDate)</pubDate>
                <guid>\(post.id?.uuidString ?? UUID().uuidString)</guid>
            </item>
            """
        }.joined(separator: "\n")
        
        let rss = """
        <?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0">
            <channel>
                <title>üõ´ –î–µ—à–µ–≤—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è</title>
                <description>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –¥–µ—à–µ–≤—ã–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º –∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç–∞–º</description>
                <link>https://t.me/gdeTravel</link>
                <language>ru</language>
                \(rssItems)
            </channel>
        </rss>
        """
        
        var response = Response()
        response.status = .ok
        response.headers.contentType = .init(type: "application", subType: "rss+xml; charset=utf-8")
        response.body = .init(string: rss)
        return response
    }
    
    // –ö—Ä–æ—Å—Å-–ø–æ—Å—Ç–∏–Ω–≥: Telegram Channel ‚Üí –î–∑–µ–Ω + T-Journal
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
    let validator = ContentValidator()
    let logger = Logger.zen()
    
    // AI –∫–ª–∏–µ–Ω—Ç (—Ç–æ–ª—å–∫–æ Anthropic Claude)
    let aiClient = AnthropicClient(client: app.client, logger: logger)
    logger.info("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Anthropic Claude (\(AppConfig.anthropicModel))")
    
    let contentGenerator = ContentGeneratorService(
        aiClient: aiClient,
        validator: validator,
        logger: logger
    )
    
    // Publisher (—Ç–æ–ª—å–∫–æ Telegram Channel)
    let publisher = TelegramChannelPublisher(
        client: app.client,
        logger: logger,
        contentGenerator: contentGenerator
    )
    logger.info("üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Channel (\(AppConfig.telegramChannelId))")
    
    let generationController = GenerationController(
        contentGenerator: contentGenerator,
        publisher: publisher as ZenPublisherProtocol
    )
    
    let telegramBotController = TelegramBotController(
        contentGenerator: contentGenerator,
        publisher: publisher as ZenPublisherProtocol
    )
    
    // –ó–∞–ø—É—Å–∫ Long Polling –¥–ª—è Telegram –±–æ—Ç–∞
    let pollingService = TelegramPollingService(
        app: app,
        controller: telegramBotController
    )
    
    app.lifecycle.use(
        TelegramPollingLifecycleHandler(pollingService: pollingService)
    )
    
    try generationController.boot(routes: app)
    
    app.logger.info("‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    app.logger.info("ü§ñ Telegram Bot –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∫–æ–º–∞–Ω–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \(AppConfig.adminUserId)")
}

