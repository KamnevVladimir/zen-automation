import Vapor
import Fluent
import FluentPostgresDriver
import PostgresKit
import Queues
import NIOSSL
import Foundation

public func configure(_ app: Application) throws {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    app.http.server.configuration.hostname = Environment.get("HOSTNAME") ?? "0.0.0.0"
    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ PORT –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    let portString = Environment.get("PORT") ?? "8080"
    let port = Int(portString) ?? 8080
    app.http.server.configuration.port = port
    app.logger.info("üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É: \(port)")
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if let databaseURL = Environment.get("DATABASE_URL") {
        var tlsConfig = TLSConfiguration.makeClientConfiguration()
        tlsConfig.certificateVerification = .none // –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è Railway
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é PostgreSQL —Å SSL
        var config = try PostgresConfiguration(url: databaseURL)!
        config.tlsConfiguration = tlsConfig
        
        app.databases.use(
            DatabaseConfigurationFactory.postgres(configuration: config),
            as: .psql
        )
    } else {
        app.logger.warning("DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ë–î")
        app.databases.use(
            DatabaseConfigurationFactory.postgres(configuration: .init(
                hostname: Environment.get("DB_HOST") ?? "localhost",
                port: Int(Environment.get("DB_PORT") ?? "5432") ?? 5432,
                username: Environment.get("DB_USER") ?? "postgres",
                password: Environment.get("DB_PASS") ?? "postgres",
                database: Environment.get("DB_NAME") ?? "zenautomation"
            )),
            as: .psql
        )
    }
    
    // –ú–∏–≥—Ä–∞—Ü–∏–∏
    app.migrations.add(CreateZenPosts())
    app.migrations.add(CreateZenImages())
    app.migrations.add(CreateZenMetrics())
    app.migrations.add(CreatePostTemplates())
    app.migrations.add(CreateTrendingDestinations())
    app.migrations.add(CreateGenerationLogs())
    app.migrations.add(AddShortAndFullPost())
    app.migrations.add(AddZenAndTelegraphUrls())
    
    // –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    try app.autoMigrate().wait()
    
    // –ú–∞—Ä—à—Ä—É—Ç—ã
    try routes(app)
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–æ–≤
    let scheduler = SimpleScheduler(app: app)
    scheduler.startPostSchedule()
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª–∏–ª—Å—è
    app.storage[SimpleSchedulerKey.self] = scheduler
    
    app.logger.info("‚úÖ Zen Automation —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω")
    app.logger.info("üìÖ –ê–≤—Ç–æ–ø–æ—Å—Ç—ã: 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å")
    app.logger.info("   üåÖ 08:00 MSK - —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç (–ª–∞–π—Ñ—Ö–∞–∫–∏)")
    app.logger.info("   üåÜ 20:00 MSK - –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç (–±—é–¥–∂–µ—Ç–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)")
    app.logger.info("‚ÑπÔ∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã: POST /api/v1/generate - —Ä—É—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞")
}

// MARK: - Storage Key –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

struct SimpleSchedulerKey: StorageKey {
    typealias Value = SimpleScheduler
}

