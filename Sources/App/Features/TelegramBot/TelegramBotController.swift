import Vapor
import Fluent

/// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram
struct TelegramBotController: RouteCollection {
    let contentGenerator: ContentGeneratorServiceProtocol
    let publisher: ZenPublisherProtocol
    
    func boot(routes: RoutesBuilder) throws {
        let webhook = routes.grouped("webhook")
        webhook.post("telegram", use: handleTelegramUpdate)
    }
    
    func handleTelegramUpdate(req: Request) async throws -> HTTPStatus {
        let update = try req.content.decode(TelegramUpdate.self)
        
        guard let message = update.message,
              let text = message.text,
              let from = message.from else {
            return .ok
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
        guard from.id == AppConfig.adminUserId else {
            req.logger.warning("‚ö†Ô∏è –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(from.id)")
            return .ok
        }
        
        req.logger.info("üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∞: \(text)")
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if text.lowercased().hasPrefix("—Å–¥–µ–ª–∞–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º–∞—Ç–∏–∫—É") {
            await handleCreatePostCommand(text: text, req: req)
        } else if text == "/start" {
            await sendWelcomeMessage(chatId: message.chat.id, req: req)
        } else if text == "/help" {
            await sendHelpMessage(chatId: message.chat.id, req: req)
        } else {
            await sendUnknownCommandMessage(chatId: message.chat.id, req: req)
        }
        
        return .ok
    }
    
    private func handleCreatePostCommand(text: String, req: Request) async {
        do {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            let topic = extractTopic(from: text)
            
            req.logger.info("üöÄ –°–æ–∑–¥–∞—é –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: \(topic)")
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á—Ç–æ –Ω–∞—á–∞–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            try await sendMessage(
                chatId: AppConfig.adminUserId,
                text: "üöÄ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: \"\(topic)\"\n\n–≠—Ç–æ –∑–∞–π–º—ë—Ç 1-2 –º–∏–Ω—É—Ç—ã...",
                req: req
            )
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã
            let templateType = determinePostType(from: topic)
            
            // –°–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            let request = GenerationRequest(
                templateType: templateType,
                topic: topic,
                destinations: extractDestinations(from: topic),
                priceData: nil,
                trendData: nil
            )
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
            let response = try await contentGenerator.generatePost(
                request: request,
                db: req.db
            )
            
            req.logger.info("‚úÖ –ü–æ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: \(response.postId)")
            
            // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            guard let post = try await ZenPostModel.find(response.postId, on: req.db) else {
                throw Abort(.notFound, reason: "Post not found")
            }
            
            let publishResult = try await publisher.publish(post: post, db: req.db)
            
            if publishResult.success {
                try await sendMessage(
                    chatId: AppConfig.adminUserId,
                    text: """
                    ‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!
                    
                    üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: \(response.title)
                    üìä –°–∏–º–≤–æ–ª–æ–≤: \(response.body.count)
                    üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: \(response.imageURLs.count)
                    üì± –ö–∞–Ω–∞–ª: \(AppConfig.telegramChannelId)
                    
                    –î–∑–µ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.
                    """,
                    req: req
                )
            } else {
                try await sendMessage(
                    chatId: AppConfig.adminUserId,
                    text: "‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: \(publishResult.errorMessage ?? "Unknown error")",
                    req: req
                )
            }
            
        } catch {
            req.logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: \(error)")
            
            try? await sendMessage(
                chatId: AppConfig.adminUserId,
                text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: \(error.localizedDescription)",
                req: req
            )
        }
    }
    
    private func extractTopic(from text: String) -> String {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É –∏–∑ "–°–¥–µ–ª–∞–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º–∞—Ç–∏–∫—É <—Ç–µ–º–∞>"
        let pattern = "—Å–¥–µ–ª–∞–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º–∞—Ç–∏–∫—É[\\s<]*([^>]+)[>]*"
        let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)
        let range = NSRange(text.startIndex..., in: text)
        
        if let match = regex.firstMatch(in: text, range: range),
           let topicRange = Range(match.range(at: 1), in: text) {
            return String(text[topicRange]).trimmingCharacters(in: .whitespacesAndNewlines)
        }
        
        // –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –∏–∑–≤–ª–µ—á—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "—Ç–µ–º–∞—Ç–∏–∫—É"
        if let index = text.lowercased().range(of: "—Ç–µ–º–∞—Ç–∏–∫—É")?.upperBound {
            return String(text[index...])
                .trimmingCharacters(in: .whitespacesAndNewlines)
                .replacingOccurrences(of: "<", with: "")
                .replacingOccurrences(of: ">", with: "")
        }
        
        return "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
    }
    
    private func determinePostType(from topic: String) -> PostCategory {
        let lowercased = topic.lowercased()
        
        if lowercased.contains("–ª–∞–π—Ñ—Ö–∞–∫") || lowercased.contains("—Å–µ–∫—Ä–µ—Ç") || lowercased.contains("—Å–æ–≤–µ—Ç") {
            return .lifehack
        } else if lowercased.contains("–±—é–¥–∂–µ—Ç") || lowercased.contains("–¥–µ—à–µ–≤") || lowercased.contains("—ç–∫–æ–Ω–æ–º–∏") {
            return .budget
        } else if lowercased.contains("—Å—Ä–∞–≤–Ω–µ–Ω") || lowercased.contains(" vs ") || lowercased.contains("–∏–ª–∏") {
            return .comparison
        } else if lowercased.contains("–≤—ã—Ö–æ–¥–Ω") || lowercased.contains("weekend") {
            return .weekend
        } else if lowercased.contains("–æ—à–∏–±–∫") || lowercased.contains("–Ω–µ –¥–µ–ª–∞") {
            return .mistake
        } else {
            return .destination
        }
    }
    
    private func extractDestinations(from topic: String) -> [String]? {
        // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω/–≥–æ—Ä–æ–¥–æ–≤ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        let destinations = ["–¢—É—Ä—Ü–∏—è", "–ï–≥–∏–ø–µ—Ç", "–û–ê–≠", "–¢–∞–∏–ª–∞–Ω–¥", "–ì—Ä—É–∑–∏—è", "–ê—Ä–º–µ–Ω–∏—è", "–í—å–µ—Ç–Ω–∞–º", "–ò–Ω–¥–∏—è", "–ö–∏—Ç–∞–π", "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω"]
        
        let foundDestinations = destinations.filter { destination in
            topic.lowercased().contains(destination.lowercased())
        }
        
        return foundDestinations.isEmpty ? nil : foundDestinations
    }
    
    private func sendWelcomeMessage(chatId: Int, req: Request) async {
        let message = """
        üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ –î–∑–µ–Ω.
        
        ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        
        üìù "–°–¥–µ–ª–∞–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º–∞—Ç–∏–∫—É <—Ç–µ–º–∞>" - —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–µ–º—É
        
        –ü—Ä–∏–º–µ—Ä—ã:
        ‚Ä¢ –°–¥–µ–ª–∞–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º–∞—Ç–∏–∫—É <–î–µ—à–µ–≤—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –≤ –Ω–æ—è–±—Ä–µ 2025>
        ‚Ä¢ –°–¥–µ–ª–∞–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º–∞—Ç–∏–∫—É <5 –ª–∞–π—Ñ—Ö–∞–∫–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –æ—Ç–µ–ª—è—Ö>
        ‚Ä¢ –°–¥–µ–ª–∞–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º–∞—Ç–∏–∫—É <–¢—É—Ä—Ü–∏—è vs –ï–≥–∏–ø–µ—Ç: –≥–¥–µ –¥–µ—à–µ–≤–ª–µ>
        
        ‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤:
        ‚Ä¢ 08:00 MSK
        ‚Ä¢ 12:00 MSK  
        ‚Ä¢ 16:00 MSK
        ‚Ä¢ 20:00 MSK
        
        üì± –ö–∞–Ω–∞–ª: \(AppConfig.telegramChannelId)
        """
        
        try? await sendMessage(chatId: chatId, text: message, req: req)
    }
    
    private func sendHelpMessage(chatId: Int, req: Request) async {
        let message = """
        ‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:
        
        üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:
        "–°–¥–µ–ª–∞–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º–∞—Ç–∏–∫—É <–≤–∞—à–∞ —Ç–µ–º–∞>"
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –ø–æ—Å—Ç–æ–≤:
        ‚Ä¢ üèñ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–¢—É—Ä—Ü–∏—è, –ï–≥–∏–ø–µ—Ç, –∏ —Ç.–¥.)
        ‚Ä¢ üí∞ –ë—é–¥–∂–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
        ‚Ä¢ üî• –õ–∞–π—Ñ—Ö–∞–∫–∏
        ‚Ä¢ ‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω
        ‚Ä¢ üèù –í—ã—Ö–æ–¥–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏
        ‚Ä¢ ‚ùå –¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
        
        –ü—Ä–∏–º–µ—Ä—ã:
        ‚Ä¢ –î–µ—à–µ–≤—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –≤ –¥–µ–∫–∞–±—Ä–µ
        ‚Ä¢ 7 —Å–µ–∫—Ä–µ—Ç–æ–≤ —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö
        ‚Ä¢ –ë–∞–ª–∏ vs –ú–∞–ª—å–¥–∏–≤—ã –¥–ª—è –æ—Ç–¥—ã—Ö–∞
        ‚Ä¢ –ö—É–¥–∞ —Å–ª–µ—Ç–∞—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –∏–∑ –ú–æ—Å–∫–≤—ã
        """
        
        try? await sendMessage(chatId: chatId, text: message, req: req)
    }
    
    private func sendUnknownCommandMessage(chatId: Int, req: Request) async {
        let message = """
        ü§î –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.
        
        –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
        üìù "–°–¥–µ–ª–∞–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º–∞—Ç–∏–∫—É <–≤–∞—à–∞ —Ç–µ–º–∞>"
        ‚ÑπÔ∏è /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        """
        
        try? await sendMessage(chatId: chatId, text: message, req: req)
    }
    
    private func sendMessage(chatId: Int, text: String, req: Request) async throws {
        let url = URI(string: "https://api.telegram.org/bot\(AppConfig.telegramToken)/sendMessage")
        
        var request = ClientRequest(method: .POST, url: url)
        request.headers.add(name: .contentType, value: "application/json")
        
        let body: [String: Any] = [
            "chat_id": chatId,
            "text": text,
            "parse_mode": "HTML"
        ]
        
        let data = try JSONSerialization.data(withJSONObject: body)
        request.body = .init(data: data)
        
        _ = try await req.client.send(request)
    }
}

// MARK: - Telegram Models

struct TelegramUpdate: Content {
    let updateId: Int
    let message: TelegramMessage?
    
    enum CodingKeys: String, CodingKey {
        case updateId = "update_id"
        case message
    }
}

struct TelegramMessage: Content {
    let messageId: Int
    let from: TelegramUser?
    let chat: TelegramChat
    let text: String?
    
    enum CodingKeys: String, CodingKey {
        case messageId = "message_id"
        case from
        case chat
        case text
    }
}

struct TelegramUser: Content {
    let id: Int
    let isBot: Bool
    let firstName: String
    let username: String?
    
    enum CodingKeys: String, CodingKey {
        case id
        case isBot = "is_bot"
        case firstName = "first_name"
        case username
    }
}

struct TelegramChat: Content {
    let id: Int
    let type: String
}
