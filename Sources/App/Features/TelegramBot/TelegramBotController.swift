import Vapor
import Fluent

/// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram
final class TelegramBotController {
    let contentGenerator: ContentGeneratorServiceProtocol
    let publisher: ZenPublisherProtocol
    let stateManager = BotStateManager()
    
    init(contentGenerator: ContentGeneratorServiceProtocol, publisher: ZenPublisherProtocol) {
        self.contentGenerator = contentGenerator
        self.publisher = publisher
    }
    
    func handleMessage(text: String, userId: Int, chatId: Int, req: Request) async {
        let currentState = stateManager.getState(for: userId)
        
        switch currentState {
        case .idle:
            await handleIdleState(text: text, userId: userId, chatId: chatId, req: req)
        case .waitingForTopic:
            await handleTopicInput(text: text, userId: userId, chatId: chatId, req: req)
        }
    }
    
    private func handleIdleState(text: String, userId: Int, chatId: Int, req: Request) async {
        if text == "üöÄ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç" {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–º—ã
            stateManager.setState(.waitingForTopic, for: userId)
            
            try? await sendMessage(
                chatId: chatId,
                text: """
                üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞:
                
                –ü—Ä–∏–º–µ—Ä—ã:
                ‚Ä¢ –î–µ—à–µ–≤—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –≤ –Ω–æ—è–±—Ä–µ 2025
                ‚Ä¢ 7 –ª–∞–π—Ñ—Ö–∞–∫–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –æ—Ç–µ–ª—è—Ö
                ‚Ä¢ –¢—É—Ä—Ü–∏—è vs –ï–≥–∏–ø–µ—Ç –¥–ª—è –æ—Ç–¥—ã—Ö–∞
                ‚Ä¢ –ö—É–¥–∞ —Å–ª–µ—Ç–∞—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –∏–∑ –ú–æ—Å–∫–≤—ã
                
                –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ üëá
                """,
                keyboard: getCancelKeyboard(),
                req: req
            )
        } else if text == "/start" {
            await sendWelcomeMessage(chatId: chatId, req: req)
        } else {
            try? await sendMessage(
                chatId: chatId,
                text: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ üëá",
                keyboard: getMainKeyboard(),
                req: req
            )
        }
    }
    
    private func handleTopicInput(text: String, userId: Int, chatId: Int, req: Request) async {
        if text == "‚ùå –û—Ç–º–µ–Ω–∞" {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
            stateManager.resetState(for: userId)
            
            try? await sendMessage(
                chatId: chatId,
                text: "‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞.",
                keyboard: getMainKeyboard(),
                req: req
            )
            return
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Ç–µ–º—É
        let topic = text.trimmingCharacters(in: .whitespacesAndNewlines)
        
        guard !topic.isEmpty else {
            try? await sendMessage(
                chatId: chatId,
                text: "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ—Å—Ç–∞.",
                keyboard: getCancelKeyboard(),
                req: req
            )
            return
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
        stateManager.resetState(for: userId)
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
        await createPost(topic: topic, chatId: chatId, req: req)
    }
    
    private func sendWelcomeMessage(chatId: Int, req: Request) async {
        let message = """
        ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Zen Automation Bot!
        
        –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω –ø—Ä–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.
        
        üì± –ö–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: \(AppConfig.telegramChannelId)
        
        ‚ö° –ê–≤—Ç–æ–ø–æ—Å—Ç—ã: 08:00, 12:00, 16:00, 20:00 MSK
        
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ üëá
        """
        
        try? await sendMessage(
            chatId: chatId,
            text: message,
            keyboard: getMainKeyboard(),
            req: req
        )
    }
    
    private func createPost(topic: String, chatId: Int, req: Request) async {
        do {
            req.logger.info("üöÄ –°–æ–∑–¥–∞—é –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: \(topic)")
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á—Ç–æ –Ω–∞—á–∞–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            try await sendMessage(
                chatId: chatId,
                text: """
                üöÄ –°–µ–π—á–∞—Å —Å–æ–∑–¥–∞–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É "\(topic)"
                
                ‚è≥ –≠—Ç–æ –∑–∞–π–º—ë—Ç 1-2 –º–∏–Ω—É—Ç—ã...
                """,
                keyboard: getMainKeyboard(),
                req: req
            )
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã
            let templateType = determinePostType(from: topic)
            
            // –°–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            let request = GenerationRequest(
                templateType: templateType,
                topic: topic,
                destinations: extractDestinations(from: topic),
                priceData: nil,
                trendData: nil
            )
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
            let response = try await contentGenerator.generatePost(
                request: request,
                db: req.db
            )
            
            req.logger.info("‚úÖ –ü–æ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: \(response.postId)")
            
            // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            guard let post = try await ZenPostModel.find(response.postId, on: req.db) else {
                throw Abort(.notFound, reason: "Post not found")
            }
            
            let publishResult = try await publisher.publish(post: post, db: req.db)
            
            if publishResult.success {
                try await sendMessage(
                    chatId: chatId,
                    text: """
                    ‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!
                    
                    üìù **\(response.title)**
                    
                    üìä –°–∏–º–≤–æ–ª–æ–≤: \(response.body.count)
                    üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: \(response.imageURLs.count)
                    üì± –ö–∞–Ω–∞–ª: \(AppConfig.telegramChannelId)
                    
                    üîÑ –î–∑–µ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç
                    
                    –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω –ø–æ—Å—Ç? üëá
                    """,
                    keyboard: getMainKeyboard(),
                    req: req
                )
            } else {
                try await sendMessage(
                    chatId: chatId,
                    text: """
                    ‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: \(publishResult.errorMessage ?? "Unknown error")
                    
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üëá
                    """,
                    keyboard: getMainKeyboard(),
                    req: req
                )
            }
            
        } catch {
            req.logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: \(error)")
            
            try? await sendMessage(
                chatId: chatId,
                text: """
                ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: \(error.localizedDescription)
                
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üëá
                """,
                keyboard: getMainKeyboard(),
                req: req
            )
        }
    }
    
    // MARK: - Keyboards
    
    private func getMainKeyboard() -> TelegramKeyboard {
        return TelegramKeyboard(
            keyboard: [
                [TelegramKeyboardButton(text: "üöÄ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç")]
            ],
            resizeKeyboard: true,
            persistent: true
        )
    }
    
    private func getCancelKeyboard() -> TelegramKeyboard {
        return TelegramKeyboard(
            keyboard: [
                [TelegramKeyboardButton(text: "‚ùå –û—Ç–º–µ–Ω–∞")]
            ],
            resizeKeyboard: true,
            persistent: false
        )
    }
    
    private func determinePostType(from topic: String) -> PostCategory {
        let lowercased = topic.lowercased()
        
        if lowercased.contains("–ª–∞–π—Ñ—Ö–∞–∫") || lowercased.contains("—Å–µ–∫—Ä–µ—Ç") || lowercased.contains("—Å–æ–≤–µ—Ç") {
            return .lifehack
        } else if lowercased.contains("–±—é–¥–∂–µ—Ç") || lowercased.contains("–¥–µ—à–µ–≤") || lowercased.contains("—ç–∫–æ–Ω–æ–º–∏") {
            return .budget
        } else if lowercased.contains("—Å—Ä–∞–≤–Ω–µ–Ω") || lowercased.contains(" vs ") || lowercased.contains("–∏–ª–∏") {
            return .comparison
        } else if lowercased.contains("–≤—ã—Ö–æ–¥–Ω") || lowercased.contains("weekend") {
            return .weekend
        } else if lowercased.contains("–æ—à–∏–±–∫") || lowercased.contains("–Ω–µ –¥–µ–ª–∞") {
            return .mistake
        } else {
            return .destination
        }
    }
    
    private func extractDestinations(from topic: String) -> [String]? {
        // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω/–≥–æ—Ä–æ–¥–æ–≤ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        let destinations = ["–¢—É—Ä—Ü–∏—è", "–ï–≥–∏–ø–µ—Ç", "–û–ê–≠", "–¢–∞–∏–ª–∞–Ω–¥", "–ì—Ä—É–∑–∏—è", "–ê—Ä–º–µ–Ω–∏—è", "–í—å–µ—Ç–Ω–∞–º", "–ò–Ω–¥–∏—è", "–ö–∏—Ç–∞–π", "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω"]
        
        let foundDestinations = destinations.filter { destination in
            topic.lowercased().contains(destination.lowercased())
        }
        
        return foundDestinations.isEmpty ? nil : foundDestinations
    }
    
    
    private func sendMessage(
        chatId: Int, 
        text: String, 
        keyboard: TelegramKeyboard? = nil, 
        req: Request
    ) async throws {
        let url = URI(string: "https://api.telegram.org/bot\(AppConfig.telegramToken)/sendMessage")
        
        var request = ClientRequest(method: .POST, url: url)
        request.headers.add(name: .contentType, value: "application/json")
        
        var body: [String: Any] = [
            "chat_id": chatId,
            "text": text,
            "parse_mode": "Markdown"
        ]
        
        if let keyboard = keyboard {
            let keyboardData = try JSONEncoder().encode(keyboard)
            let keyboardDict = try JSONSerialization.jsonObject(with: keyboardData)
            body["reply_markup"] = keyboardDict
        }
        
        let data = try JSONSerialization.data(withJSONObject: body)
        request.body = .init(data: data)
        
        _ = try await req.client.send(request)
    }
}

// MARK: - Telegram Models

struct TelegramUpdate: Content {
    let updateId: Int
    let message: TelegramMessage?
    
    enum CodingKeys: String, CodingKey {
        case updateId = "update_id"
        case message
    }
}

struct TelegramMessage: Content {
    let messageId: Int
    let from: TelegramUser?
    let chat: TelegramChat
    let text: String?
    
    enum CodingKeys: String, CodingKey {
        case messageId = "message_id"
        case from
        case chat
        case text
    }
}

struct TelegramUser: Content {
    let id: Int
    let isBot: Bool
    let firstName: String
    let username: String?
    
    enum CodingKeys: String, CodingKey {
        case id
        case isBot = "is_bot"
        case firstName = "first_name"
        case username
    }
}

struct TelegramChat: Content {
    let id: Int
    let type: String
}

// MARK: - Keyboard Models

struct TelegramKeyboard: Content {
    let keyboard: [[TelegramKeyboardButton]]
    let resizeKeyboard: Bool
    let persistent: Bool
    
    enum CodingKeys: String, CodingKey {
        case keyboard
        case resizeKeyboard = "resize_keyboard"
        case persistent = "is_persistent"
    }
}

struct TelegramKeyboardButton: Content {
    let text: String
}
