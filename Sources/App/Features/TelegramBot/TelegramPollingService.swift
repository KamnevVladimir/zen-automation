import Vapor
import Foundation

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram —á–µ—Ä–µ–∑ Long Polling
final class TelegramPollingService {
    private let app: Application
    private let client: Client
    private let botToken: String
    private let controller: TelegramBotController
    private var offset: Int = 0
    private var isRunning = false
    
    init(app: Application, controller: TelegramBotController) {
        self.app = app
        self.client = app.client
        self.botToken = AppConfig.telegramToken
        self.controller = controller
    }
    
    func start() {
        guard !isRunning else { return }
        isRunning = true
        
        app.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Long Polling...")
        
        Task {
            // –ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º: —É–¥–∞–ª—è–µ–º webhook –∏ –æ—á–∏—â–∞–µ–º pending updates
            await initializePolling()
            await pollForUpdates()
        }
    }
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è polling: —É–¥–∞–ª–µ–Ω–∏–µ webhook –∏ –æ—á–∏—Å—Ç–∫–∞ updates
    private func initializePolling() async {
        do {
            // 0. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å webhook
            app.logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å webhook...")
            try await getWebhookInfo()
            
            // 1. –£–¥–∞–ª—è–µ–º webhook (–µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
            app.logger.info("üîß –£–¥–∞–ª—è—é webhook –∏ pending updates...")
            try await deleteWebhook()
            
            // –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è webhook
            try await Task.sleep(nanoseconds: 2_000_000_000) // 2 —Å–µ–∫—É–Ω–¥—ã
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ webhook —É–¥–∞–ª—ë–Ω
            app.logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é —á—Ç–æ webhook —É–¥–∞–ª—ë–Ω...")
            try await getWebhookInfo()
            
            app.logger.info("‚úÖ Polling –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        } catch {
            app.logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ polling: \(error)")
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
    private func getWebhookInfo() async throws {
        let url = URI(string: "https://api.telegram.org/bot\(botToken)/getWebhookInfo")
        
        var request = ClientRequest(method: .GET, url: url)
        let response = try await client.send(request)
        
        guard response.status == .ok else {
            app.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å webhook info: \(response.status)")
            return
        }
        
        struct WebhookInfoResponse: Codable {
            let ok: Bool
            let result: WebhookInfo
            
            struct WebhookInfo: Codable {
                let url: String
                let hasCustomCertificate: Bool
                let pendingUpdateCount: Int
                let lastErrorDate: Int?
                let lastErrorMessage: String?
                
                enum CodingKeys: String, CodingKey {
                    case url
                    case hasCustomCertificate = "has_custom_certificate"
                    case pendingUpdateCount = "pending_update_count"
                    case lastErrorDate = "last_error_date"
                    case lastErrorMessage = "last_error_message"
                }
            }
        }
        
        if let webhookInfo = try? response.content.decode(WebhookInfoResponse.self) {
            if webhookInfo.result.url.isEmpty {
                app.logger.info("‚úÖ Webhook –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (polling –¥–æ—Å—Ç—É–ø–µ–Ω)")
            } else {
                app.logger.warning("‚ö†Ô∏è WEBHOOK –£–°–¢–ê–ù–û–í–õ–ï–ù: \(webhookInfo.result.url)")
                app.logger.warning("   Pending updates: \(webhookInfo.result.pendingUpdateCount)")
            }
            
            if let lastError = webhookInfo.result.lastErrorMessage {
                app.logger.warning("   Last error: \(lastError)")
            }
        }
    }
    
    /// –£–¥–∞–ª—è–µ—Ç webhook
    private func deleteWebhook() async throws {
        let url = URI(string: "https://api.telegram.org/bot\(botToken)/deleteWebhook")
        
        var request = ClientRequest(method: .POST, url: url)
        request.headers.add(name: .contentType, value: "application/json")
        
        let body: [String: Any] = ["drop_pending_updates": true]
        let data = try JSONSerialization.data(withJSONObject: body)
        request.body = .init(data: data)
        
        let response = try await client.send(request)
        
        guard response.status == .ok else {
            app.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: \(response.status)")
            return
        }
        
        app.logger.info("‚úÖ Webhook —É–¥–∞–ª—ë–Ω")
    }
    
    func stop() {
        isRunning = false
        app.logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram Long Polling")
    }
    
    private func pollForUpdates() async {
        while isRunning {
            do {
                let updates = try await getUpdates()
                
                for update in updates {
                    // –û–±–Ω–æ–≤–ª—è–µ–º offset –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    offset = max(offset, update.updateId + 1)
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    await processUpdate(update)
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                try await Task.sleep(nanoseconds: 1_000_000_000) // 1 —Å–µ–∫—É–Ω–¥–∞
                
            } catch {
                // –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –Ω–µ –ø–∞–¥–∞–µ–º, –∞ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                if isRunning {  // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏–¥–µ—Ç shutdown
                    app.logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ polling (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É): \(error)")
                    // –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    try? await Task.sleep(nanoseconds: 5_000_000_000) // 5 —Å–µ–∫—É–Ω–¥
                } else {
                    app.logger.info("‚ÑπÔ∏è Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–æ –≤—Ä–µ–º—è shutdown")
                    break
                }
            }
        }
    }
    
    private func getUpdates() async throws -> [TelegramUpdate] {
        let url = URI(string: "https://api.telegram.org/bot\(botToken)/getUpdates")
        
        var request = ClientRequest(method: .POST, url: url)
        request.headers.add(name: .contentType, value: "application/json")
        
        let body: [String: Any] = [
            "offset": offset,
            "limit": 100,
            "timeout": 30 // Long polling timeout
        ]
        
        let data = try JSONSerialization.data(withJSONObject: body)
        request.body = .init(data: data)
        
        let response = try await client.send(request)
        
        guard response.status == .ok else {
            let errorBody = response.body.map { String(buffer: $0) } ?? "No error body"
            app.logger.error("‚ùå Telegram getUpdates error!")
            app.logger.error("   Status: \(response.status.code) \(response.status.reasonPhrase)")
            app.logger.error("   Body: \(errorBody)")
            throw Abort(.internalServerError, reason: "Telegram API error: \(response.status) - \(errorBody)")
        }
        
        struct TelegramResponse: Content {
            let ok: Bool
            let result: [TelegramUpdate]
        }
        
        let telegramResponse = try response.content.decode(TelegramResponse.self)
        
        guard telegramResponse.ok else {
            throw Abort(.internalServerError, reason: "Telegram API returned error")
        }
        
        return telegramResponse.result
    }
    
    private func processUpdate(_ update: TelegramUpdate) async {
        guard let message = update.message,
              let text = message.text,
              let from = message.from else {
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
        guard from.id == AppConfig.adminUserId else {
            app.logger.info("‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(from.id)")
            return
        }
        
        app.logger.info("üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∞: \(text)")
        
        // –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤—ã–π Request –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        let fakeRequest = Request(
            application: app,
            method: .POST,
            url: URI(string: "/fake"),
            on: app.eventLoopGroup.next()
        )
        
        // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        await controller.handleMessage(
            text: text,
            userId: from.id,
            chatId: message.chat.id,
            req: fakeRequest
        )
    }
}
