import Vapor
import Foundation

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ Telegraph
final class TelegraphPublisher {
    private let client: Client
    private let logger: Logger
    
    private let baseURL = "https://api.telegra.ph"
    
    init(client: Client, logger: Logger) {
        self.client = client
        self.logger = logger
    }
    
    /// –°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Telegraph –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL
    func createPage(title: String, content: String, images: [ZenImageModel]) async throws -> String {
        logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Telegraph: \(title)")
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML-–º–∞—Å—Å–∏–≤ –¥–ª—è Telegraph
        let htmlArray = convertToTelegraphHTMLArray(content: content, images: images)
        
        let url = URI(string: "\(baseURL)/createPage")
        
        let requestBody: [String: Any] = [
            "title": title,
            "content": htmlArray,
            "author_name": "GdeTravel",
            "author_url": "https://t.me/gdeTravel"
        ]
        
        var request = ClientRequest(method: .POST, url: url)
        request.headers.add(name: .contentType, value: "application/json")
        request.body = .init(data: try JSONSerialization.data(withJSONObject: requestBody))
        
        let response = try await client.send(request)
        
        guard response.status == .ok else {
            logger.error("‚ùå Telegraph API error: \(response.status)")
            throw Abort(.badRequest, reason: "Telegraph API error: \(response.status)")
        }
        
        struct TelegraphResponse: Codable {
            let ok: Bool
            let result: TelegraphPage
            
            struct TelegraphPage: Codable {
                let path: String
                let url: String
                let title: String
            }
        }
        
        let telegraphResponse = try response.content.decode(TelegraphResponse.self)
        
        if telegraphResponse.ok {
            logger.info("‚úÖ Telegraph —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: \(telegraphResponse.result.url)")
            return telegraphResponse.result.url
        } else {
            throw Abort(.badRequest, reason: "Failed to create Telegraph page")
        }
    }
    
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Markdown –∫–æ–Ω—Ç–µ–Ω—Ç –≤ HTML-–º–∞—Å—Å–∏–≤ –¥–ª—è Telegraph API
    private func convertToTelegraphHTMLArray(content: String, images: [ZenImageModel]) -> [[String: Any]] {
        var htmlArray: [[String: Any]] = []
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        var processedContent = content
        
        // –ó–∞–º–µ–Ω—è–µ–º **–∂–∏—Ä–Ω—ã–π** –Ω–∞ <b>–∂–∏—Ä–Ω—ã–π</b>
        let boldRegex = try! NSRegularExpression(pattern: "\\*\\*([^*]+)\\*\\*", options: [])
        let range = NSRange(location: 0, length: processedContent.utf16.count)
        processedContent = boldRegex.stringByReplacingMatches(in: processedContent, options: [], range: range, withTemplate: "<b>$1</b>")
        
        // –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ HTML —Å–ø–∏—Å–∫–∏
        processedContent = processedContent.replacingOccurrences(of: "‚ö°Ô∏è", with: "<br>‚Ä¢ ")
        processedContent = processedContent.replacingOccurrences(of: "üéØ", with: "<br>‚Ä¢ ")
        processedContent = processedContent.replacingOccurrences(of: "‚úàÔ∏è", with: "<br>‚Ä¢ ")
        processedContent = processedContent.replacingOccurrences(of: "üí∞", with: "<br>‚Ä¢ ")
        processedContent = processedContent.replacingOccurrences(of: "üìç", with: "<br>‚Ä¢ ")
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ <br>
        processedContent = processedContent.replacingOccurrences(of: "\n", with: "<br>")
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ HTML —ç–ª–µ–º–µ–Ω—Ç
        htmlArray.append([
            "tag": "p",
            "children": [processedContent]
        ])
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for (index, image) in images.enumerated() {
            htmlArray.append([
                "tag": "figure",
                "children": [
                    [
                        "tag": "img",
                        "attrs": [
                            "src": image.url,
                            "alt": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ \(index + 1)"
                        ]
                    ]
                ]
            ])
        }
        
        return htmlArray
    }
}

/// –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegraph
protocol TelegraphPublisherProtocol {
    func createPage(title: String, content: String, images: [ZenImageModel]) async throws -> String
}
