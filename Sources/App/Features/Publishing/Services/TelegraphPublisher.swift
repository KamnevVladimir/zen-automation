import Vapor
import Foundation

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ Telegraph
final class TelegraphPublisher: TelegraphPublisherProtocol {
    private let client: Client
    private let logger: Logger
    
    private let baseURL = "https://api.telegra.ph"
    private var accessToken: String?
    
    init(client: Client, logger: Logger) {
        self.client = client
        self.logger = logger
    }
    
    /// –°–æ–∑–¥–∞—ë—Ç –∞–∫–∫–∞—É–Ω—Ç Telegraph –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç access_token
    private func createAccount() async throws -> String {
        logger.info("üîê –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegraph...")
        
        let url = URI(string: "\(baseURL)/createAccount")
        
        let requestBody: [String: Any] = [
            "short_name": "GdeTravel",
            "author_name": "GdeTravel",
            "author_url": "https://t.me/gdeTravel"
        ]
        
        var request = ClientRequest(method: .POST, url: url)
        request.headers.add(name: .contentType, value: "application/json")
        request.body = .init(data: try JSONSerialization.data(withJSONObject: requestBody))
        
        let response = try await client.send(request)
        
        guard response.status == .ok else {
            let errorBody = response.body.map { String(buffer: $0) } ?? "No error body"
            logger.error("‚ùå Telegraph createAccount error: \(response.status)")
            logger.error("   Response: \(errorBody)")
            throw Abort(.badRequest, reason: "Telegraph createAccount error")
        }
        
        struct CreateAccountResponse: Codable {
            let ok: Bool
            let result: AccountResult
            
            struct AccountResult: Codable {
                let short_name: String
                let author_name: String
                let author_url: String?
                let access_token: String
                let auth_url: String?
            }
        }
        
        let accountResponse = try response.content.decode(CreateAccountResponse.self)
        
        if accountResponse.ok {
            logger.info("‚úÖ Telegraph –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω, access_token –ø–æ–ª—É—á–µ–Ω")
            return accountResponse.result.access_token
        } else {
            throw Abort(.badRequest, reason: "Failed to create Telegraph account")
        }
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç access_token
    private func getAccessToken() async throws -> String {
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –µ—Å—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if let token = accessToken {
            return token
        }
        
        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
        let token = try await createAccount()
        accessToken = token
        
        return token
    }
    
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Telegram file_id –≤ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
    private func convertTelegramFileIdToUrl(fileId: String) -> String {
        // Telegram file_id –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ getFile API
        // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å - Telegraph –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å Telegram URLs
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ getFile API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏
        return fileId
    }
    
    /// –°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Telegraph –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL
    func createPage(title: String, content: String, images: [ZenImageModel]) async throws -> String {
        logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Telegraph: \(title)")
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º access_token
        let token = try await getAccessToken()
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML-–º–∞—Å—Å–∏–≤ –¥–ª—è Telegraph
        let htmlArray = convertToTelegraphHTMLArray(content: content, images: images)
        
        let url = URI(string: "\(baseURL)/createPage")
        
        let requestBody: [String: Any] = [
            "access_token": token,
            "title": title,
            "content": htmlArray,
            "author_name": "GdeTravel",
            "author_url": "https://t.me/gdeTravel"
        ]
        
        var request = ClientRequest(method: .POST, url: url)
        request.headers.add(name: .contentType, value: "application/json")
        request.body = .init(data: try JSONSerialization.data(withJSONObject: requestBody))
        
        let response = try await client.send(request)
        
        guard response.status == .ok else {
            let errorBody = response.body.map { String(buffer: $0) } ?? "No error body"
            logger.error("‚ùå Telegraph API error: \(response.status)")
            logger.error("   Response body: \(errorBody)")
            throw Abort(.badRequest, reason: "Telegraph API error: \(response.status)")
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        let bodyString = response.body.map { String(buffer: $0) } ?? "{}"
        logger.info("üì• Telegraph response: \(bodyString.prefix(1000))")
        
        // –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        struct TelegraphResponseSuccess: Codable {
            let ok: Bool
            let result: TelegraphPage
        }
        
        struct TelegraphResponseError: Codable {
            let ok: Bool
            let error: String
        }
        
        struct TelegraphPage: Codable {
            let path: String
            let url: String
            let title: String
        }
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É
        if let errorResponse = try? response.content.decode(TelegraphResponseError.self), !errorResponse.ok {
            logger.error("‚ùå Telegraph API error: \(errorResponse.error)")
            throw Abort(.badRequest, reason: "Telegraph API error: \(errorResponse.error)")
        }
        
        // –ü–∞—Ä—Å–∏–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        let successResponse = try response.content.decode(TelegraphResponseSuccess.self)
        
        guard successResponse.ok else {
            throw Abort(.badRequest, reason: "Telegraph returned ok=false")
        }
        
        logger.info("‚úÖ Telegraph —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: \(successResponse.result.url)")
        return successResponse.result.url
    }
    
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Markdown –∫–æ–Ω—Ç–µ–Ω—Ç –≤ HTML-–º–∞—Å—Å–∏–≤ –¥–ª—è Telegraph API
    private func convertToTelegraphHTMLArray(content: String, images: [ZenImageModel]) -> [[String: Any]] {
        var htmlArray: [[String: Any]] = []
        
        // 1. –°–ù–ê–ß–ê–õ–ê –¥–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if let mainImage = images.first(where: { $0.position == 0 }) {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Telegram file_id –≤ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
            let imageUrl = convertTelegramFileIdToUrl(fileId: mainImage.url)
            htmlArray.append([
                "tag": "figure",
                "children": [
                    [
                        "tag": "img",
                        "attrs": [
                            "src": imageUrl,
                            "alt": "–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                        ]
                    ]
                ]
            ])
        }
        
        // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        var processedContent = content
        
        // –ó–∞–º–µ–Ω—è–µ–º **–∂–∏—Ä–Ω—ã–π** –Ω–∞ <b>–∂–∏—Ä–Ω—ã–π</b>
        let boldRegex = try! NSRegularExpression(pattern: "\\*\\*([^*]+)\\*\\*", options: [])
        let range = NSRange(location: 0, length: processedContent.utf16.count)
        processedContent = boldRegex.stringByReplacingMatches(in: processedContent, options: [], range: range, withTemplate: "<b>$1</b>")
        
        // –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ HTML —Å–ø–∏—Å–∫–∏ (—É–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º bullet points)
        processedContent = processedContent.replacingOccurrences(of: "‚ö°Ô∏è ", with: "<br>‚Ä¢ ")
        processedContent = processedContent.replacingOccurrences(of: "üéØ ", with: "<br>‚Ä¢ ")
        processedContent = processedContent.replacingOccurrences(of: "‚úàÔ∏è ", with: "<br>‚Ä¢ ")
        processedContent = processedContent.replacingOccurrences(of: "üí∞ ", with: "<br>‚Ä¢ ")
        processedContent = processedContent.replacingOccurrences(of: "üìç ", with: "<br>‚Ä¢ ")
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ <br>
        processedContent = processedContent.replacingOccurrences(of: "\n", with: "<br>")
        
        // 3. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ HTML —ç–ª–µ–º–µ–Ω—Ç
        htmlArray.append([
            "tag": "p",
            "children": [processedContent]
        ])
        
        // 4. –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        let additionalImages = images.filter { $0.position != 0 }
        for (index, image) in additionalImages.enumerated() {
            htmlArray.append([
                "tag": "figure",
                "children": [
                    [
                        "tag": "img",
                        "attrs": [
                            "src": image.url,
                            "alt": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ \(index + 2)"
                        ]
                    ]
                ]
            ])
        }
        
        return htmlArray
    }
}

/// –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegraph
protocol TelegraphPublisherProtocol {
    func createPage(title: String, content: String, images: [ZenImageModel]) async throws -> String
}
