import Vapor
import Fluent

/// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram Channel (–¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –î–∑–µ–Ω)
final class TelegramChannelPublisher: ZenPublisherProtocol {
    private let client: Client
    private let botToken: String
    private let channelId: String // –ù–∞–ø—Ä–∏–º–µ—Ä: @your_channel
    private let logger: Logger
    private let telegraphPublisher: TelegraphPublisherProtocol
    private let contentGenerator: ContentGeneratorServiceProtocol
    
    init(
        client: Client,
        logger: Logger,
        contentGenerator: ContentGeneratorServiceProtocol
    ) {
        self.client = client
        self.botToken = AppConfig.telegramToken
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        let rawChannelId = AppConfig.telegramChannelId
        self.channelId = rawChannelId.hasPrefix("@") ? rawChannelId : "@\(rawChannelId)"
        self.logger = logger
        self.telegraphPublisher = TelegraphPublisher(client: client, logger: logger)
        self.contentGenerator = contentGenerator
    }
    
    func publish(post: ZenPostModel, db: Database) async throws -> PublishResult {
        // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ë–î
        let images = try await ZenImageModel.query(on: db)
            .filter(\.$post.$id == post.id!)
            .sort(\.$position)
            .all()
        
        return try await publishInternal(post: post, images: images, db: db)
    }
    
    private func publishInternal(post: ZenPostModel, images: [ZenImageModel], db: Database) async throws -> PublishResult {
        logger.info("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –∫–∞–Ω–∞–ª: \(channelId)")
        
        do {
            // 1. –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω—ã–π –ø–æ—Å—Ç –≤ Telegraph
            let fullContent = post.fullPost ?? formatFullContent(post: post)
            let telegraphURL = try await telegraphPublisher.createPage(
                title: post.title,
                content: fullContent,
                images: images
            )
            
            logger.info("‚úÖ Telegraph —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: \(telegraphURL)")
            
            // 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –æ—Ç AI + –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
            let shortContent = try await formatShortContentFromAI(post: post, telegraphURL: telegraphURL)
            
            // 3. –ü—É–±–ª–∏–∫—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç —Å –≥–ª–∞–≤–Ω—ã–º —Ñ–æ—Ç–æ
            if let mainImage = images.first(where: { $0.position == 0 }) {
                logger.info("üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è: –§–æ—Ç–æ + –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç (\(shortContent.count) —Å–∏–º–≤–æ–ª–æ–≤)")
                try await sendPhoto(url: mainImage.url, caption: shortContent)
            } else {
                logger.info("üìÑ –ü—É–±–ª–∏–∫–∞—Ü–∏—è: –¢–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç (\(shortContent.count) —Å–∏–º–≤–æ–ª–æ–≤)")
                try await sendMessage(text: shortContent)
            }
            
        // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
        post.status = .published
        post.publishedAt = Date()
        post.zenArticleId = "tg_\(UUID().uuidString.prefix(12))"
        try await post.save(on: db)
        
        logger.info("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram: \(post.title)")
            
            return PublishResult(
                success: true,
                zenArticleId: post.zenArticleId,
                publishedURL: "https://t.me/\(channelId.replacingOccurrences(of: "@", with: ""))",
                errorMessage: nil
            )
            
        } catch {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: \(error)")
            return PublishResult(
                success: false,
                zenArticleId: nil,
                publishedURL: nil,
                errorMessage: error.localizedDescription
            )
        }
    }
    
    private func sendPhoto(url: String, caption: String) async throws {
        let apiUrl = URI(string: "https://api.telegram.org/bot\(botToken)/sendPhoto")
        
        var request = ClientRequest(method: .POST, url: apiUrl)
        request.headers.add(name: .contentType, value: "application/json")
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML –¥–ª—è Telegram
        let htmlCaption = convertMarkdownToHTML(caption)
        
        // Telegram –ª–∏–º–∏—Ç –¥–ª—è caption: 1024 —Å–∏–º–≤–æ–ª–∞
        let maxCaptionLength = 1024
        let finalCaption: String
        
        if htmlCaption.count > maxCaptionLength {
            logger.warning("‚ö†Ô∏è Caption —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (\(htmlCaption.count) —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞—é –¥–æ \(maxCaptionLength)")
            
            // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–æ —Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞
            let truncated = String(htmlCaption.prefix(maxCaptionLength))
            if let lastSpaceIndex = truncated.lastIndex(of: " ") {
                finalCaption = String(truncated[..<lastSpaceIndex]) + "..."
            } else {
                finalCaption = truncated + "..."
            }
            
            logger.info("üìù –ò—Ç–æ–≥–æ–≤—ã–π caption: \(finalCaption.count) —Å–∏–º–≤–æ–ª–æ–≤")
        } else {
            finalCaption = htmlCaption
        }
        
        let body: [String: Any] = [
            "chat_id": channelId,
            "photo": url,
            "caption": finalCaption,
            "parse_mode": "HTML"
        ]
        
        let data = try JSONSerialization.data(withJSONObject: body)
        request.body = .init(data: data)
        
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ç–æ –≤ Telegram: \(url)")
        logger.info("üì¶ –†–∞–∑–º–µ—Ä JSON payload: \(data.count) –±–∞–π—Ç")
        
        let response = try await client.send(request)
        
        guard response.status == .ok else {
            let errorBody = response.body.map { String(buffer: $0) } ?? "No error body"
            logger.error("‚ùå Telegram API sendPhoto error!")
            logger.error("   Status: \(response.status.code) \(response.status.reasonPhrase)")
            logger.error("   Body: \(errorBody)")
            logger.error("   Photo URL: \(url)")
            logger.error("   Payload size: \(data.count) –±–∞–π—Ç")
            throw Abort(.internalServerError, reason: "Telegram API error: \(response.status.code) \(response.status.reasonPhrase)")
        }
        
        logger.info("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    }
    
    private func sendMessage(text: String) async throws {
        let apiUrl = URI(string: "https://api.telegram.org/bot\(botToken)/sendMessage")
        
        var request = ClientRequest(method: .POST, url: apiUrl)
        request.headers.add(name: .contentType, value: "application/json")
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML –¥–ª—è Telegram
        let htmlText = convertMarkdownToHTML(text)
        
        let body: [String: Any] = [
            "chat_id": channelId,
            "text": htmlText,
            "parse_mode": "HTML",
            "disable_web_page_preview": false
        ]
        
        let data = try JSONSerialization.data(withJSONObject: body)
        request.body = .init(data: data)
        
        let response = try await client.send(request)
        
        guard response.status == .ok else {
            throw Abort(.internalServerError, reason: "Telegram API error: \(response.status)")
        }
    }
    
    /// DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ formatShortContentFromAI –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
    private func formatCaption(post: ZenPostModel) -> String {
        // Telegram caption –°–¢–†–û–ì–ò–ô –ª–∏–º–∏—Ç: 1024 —Å–∏–º–≤–æ–ª–∞
        var caption = ""
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
        let title = post.title.prefix(1).uppercased() + post.title.dropFirst()
        caption += "**\(title)**"
        
        if let subtitle = post.subtitle, !subtitle.isEmpty {
            let sub = subtitle.prefix(1).uppercased() + subtitle.dropFirst()
            caption += "\n\n\(sub)"
        }
        
        // –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ —É–∂–µ –∑–∞–Ω—è—Ç–æ
        let headerLength = caption.count + 4 // +4 –Ω–∞ \n\n
        let maxBodyLength = 1024 - headerLength - 10 // -10 –Ω–∞ ... –∏ –∑–∞–ø–∞—Å
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º shortPost –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ fullPost
        let content = post.shortPost ?? post.fullPost ?? ""
        if maxBodyLength > 100 && !content.isEmpty {
            let bodyPreview = smartTruncate(content, maxLength: maxBodyLength)
        caption += "\n\n\(bodyPreview)"
        }
        
        return caption
    }
    
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–≤–µ—Å—å —Ç–µ–∫—Å—Ç)
    /// DEPRECATED: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç.–∫. AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç fullPost
    private func formatFullContent(post: ZenPostModel) -> String {
        // –ï—Å–ª–∏ fullPost –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        var content = ""
        
        let title = post.title.prefix(1).uppercased() + post.title.dropFirst()
        content += "**\(title)**"
        
        if let subtitle = post.subtitle, !subtitle.isEmpty {
            let sub = subtitle.prefix(1).uppercased() + subtitle.dropFirst()
            content += "\n\n\(sub)"
        }
        
        content += "\n\n‚ö†Ô∏è –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        return content
    }
    
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –æ—Ç AI + –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Telegraph
    ///
    /// –í–ê–ñ–ù–û: –ü–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –î–∑–µ–Ω–∞ (https://dzen.ru/help/ru/channel/cross-platform.html):
    /// - –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–¥–æ —Ç–æ—á–∫–∏) = –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –î–∑–µ–Ω–µ (–º–∞–∫—Å 140 —Å–∏–º–≤–æ–ª–æ–≤)
    /// - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ Telegram –ù–ï –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –≤ –î–∑–µ–Ω
    /// - –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ = –æ–±–ª–æ–∂–∫–∞ —Å—Ç–∞—Ç—å–∏
    private func formatShortContentFromAI(post: ZenPostModel, telegraphURL: String) async throws -> String {
        // AI —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
        // –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ = –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –î–∑–µ–Ω–∞
        guard var aiShortPost = post.shortPost, !aiShortPost.isEmpty else {
            // –ï—Å–ª–∏ shortPost –ø—É—Å—Ç–æ–π - –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞: –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω\n\nüìñ –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç—å—é:\n\(telegraphURL)"
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –∏ –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç—å—é
        // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –î–õ–Ø –Ø–ù–î–ï–ö–° –î–ó–ï–ù–ê: –ø—Ä–æ—Å—Ç—ã–µ —Å—Å—ã–ª–∫–∏ –±–µ–∑ Markdown
        let botLink = "ü§ñ @gdeVacationBot - –ø–æ–∏—Å–∫ –¥–µ—à—ë–≤—ã—Ö –±–∏–ª–µ—Ç–æ–≤"
        let fullArticleLink = "üìñ –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç—å—è: \(telegraphURL)"
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –†–ï–ê–õ–¨–ù–£–Æ –¥–ª–∏–Ω—É —Å—Å—ã–ª–æ–∫ (Telegraph URL –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º!)
        let linksText = "\n\n\(botLink)\n\(fullArticleLink)"
        let linksLength = linksText.count
        
        logger.info("üìè –î–ª–∏–Ω–∞ —Å—Å—ã–ª–æ–∫: \(linksLength) —Å–∏–º–≤–æ–ª–æ–≤ (–±–æ—Ç: ~85, telegraph: ~\(fullArticleLink.count))")
        
        // Telegram –ª–∏–º–∏—Ç –¥–ª—è caption: 1024 —Å–∏–º–≤–æ–ª–∞
        // –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä: 900-1000 —Å–∏–º–≤–æ–ª–æ–≤ (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        let maxCaptionLength = 1024
        // –í–ê–ñ–ù–û: –≤—ã—á–∏—Ç–∞–µ–º –†–ï–ê–õ–¨–ù–£–Æ –¥–ª–∏–Ω—É —Å—Å—ã–ª–æ–∫, –∞ –Ω–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é 200
        let targetContentLength = maxCaptionLength - linksLength - 20 // -20 –Ω–∞ –∑–∞–ø–∞—Å
        let minContentLength = 900 - linksLength
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç
        var attempts = 0
        let maxAttempts = 3
        
        while aiShortPost.count + linksLength > maxCaptionLength && attempts < maxAttempts {
            attempts += 1
            logger.warning("‚ö†Ô∏è ShortPost —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (\(aiShortPost.count + linksLength) —Å–∏–º–≤–æ–ª–æ–≤ > \(maxCaptionLength))")
            logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ \(attempts)/\(maxAttempts): –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —É Claude –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç...")
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É Claude –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
            let fullPost = post.fullPost ?? ""
            aiShortPost = try await contentGenerator.regenerateShortPost(
                fullPost: fullPost,
                currentShortPost: aiShortPost,
                targetLength: targetContentLength
            )
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π shortPost –≤ –ë–î
            post.shortPost = aiShortPost
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        let finalContentLength = aiShortPost.count + linksLength
        
        if finalContentLength > maxCaptionLength {
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–º–µ—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ \(maxCaptionLength) —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ \(attempts) –ø–æ–ø—ã—Ç–æ–∫")
            logger.error("   –ò—Ç–æ–≥–æ–≤–∞—è –¥–ª–∏–Ω–∞: \(finalContentLength) —Å–∏–º–≤–æ–ª–æ–≤")
            throw Abort(.badRequest, reason: "–ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–∞–∂–µ –ø–æ—Å–ª–µ \(attempts) –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–π")
        }
        
        if finalContentLength < minContentLength {
            logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –∫–æ—Ä–æ—á–µ —Ü–µ–ª–µ–≤–æ–≥–æ (\(finalContentLength) < \(minContentLength))")
        }
        
        // –ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        let content = aiShortPost + linksText
        
        logger.info("‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π short content: \(content.count) —Å–∏–º–≤–æ–ª–æ–≤ (—Ü–µ–ª—å: 900-1000, –ª–∏–º–∏—Ç: \(maxCaptionLength))")
        
        return content
    }
    
    /// DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ formatShortContentFromAI –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Telegram (500-800 —Å–∏–º–≤–æ–ª–æ–≤ + —Å—Å—ã–ª–∫–∞ –Ω–∞ Telegraph)
    private func formatShortContent(post: ZenPostModel, telegraphURL: String) -> String {
        var content = ""
        
        // –ù–∞—á–∞–ª–æ —Å –ø—Ä–∏–∑—ã–≤–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç—å—é
        content += "üìñ –ß–∏—Ç–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç—å—é —Å–æ –≤—Å–µ–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ –≤ –Ω–∞—à–µ–º Telegraph –∫–∞–Ω–∞–ª–µ:\n\n"
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
        let title = post.title.prefix(1).uppercased() + post.title.dropFirst()
        content += "**\(title)**"
        
        if let subtitle = post.subtitle, !subtitle.isEmpty {
            let sub = subtitle.prefix(1).uppercased() + subtitle.dropFirst()
            content += "\n\n\(sub)"
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fullPost –¥–ª—è preview
        let fullContent = post.fullPost ?? ""
        let maxBodyLength = 450 // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω—Ü–µ
        let bodyPreview = smartTruncate(fullContent, maxLength: maxBodyLength)
        content += "\n\n\(bodyPreview)"
        
        // –•–µ—à—Ç–µ–≥–∏
        content += "\n\n#–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è #–¥–µ—à–µ–≤—ã–µ–ø–æ–ª–µ—Ç—ã #–æ—Ç–ø—É—Å–∫"
        
        // –ö–æ–Ω–µ—Ü —Å –ø—Ä–∏–∑—ã–≤–æ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç—å—é
        content += "\n\nüìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç—å—è —Å–æ –≤—Å–µ–º–∏ –¥–µ—Ç–∞–ª—è–º–∏:\n\(telegraphURL)"
        
        return content
    }
    
    /// –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ maxLength, —É–º–Ω–æ (–ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º)
    private func splitIntoChunks(_ text: String, maxLength: Int) -> [String] {
        if text.count <= maxLength {
            return [text]
        }
        
        var chunks: [String] = []
        var remaining = text
        
        while !remaining.isEmpty {
            if remaining.count <= maxLength {
                chunks.append(remaining)
                break
            }
            
            // –ë–µ—Ä—ë–º –∫—É—Å–æ–∫ —Å –∑–∞–ø–∞—Å–æ–º
            let chunk = String(remaining.prefix(maxLength - 3))
            
            // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫
            if let lastSentenceEnd = chunk.lastIndex(where: { $0 == "." || $0 == "!" || $0 == "?" }) {
                let chunkText = String(chunk[...lastSentenceEnd])
                chunks.append(chunkText)
                remaining = String(remaining.dropFirst(chunkText.count))
            } else if let lastSpace = chunk.lastIndex(of: " ") {
                // –ï—Å–ª–∏ –Ω–µ—Ç - –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–æ–±–µ–ª—É
                let chunkText = String(chunk[...lastSpace])
                chunks.append(chunkText)
                remaining = String(remaining.dropFirst(chunkText.count))
            } else {
                // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ - –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–µ–∑–∞–µ–º
                chunks.append(chunk)
                remaining = String(remaining.dropFirst(chunk.count))
            }
            
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫—É—Å–∫–∞
            remaining = remaining.trimmingCharacters(in: .whitespacesAndNewlines)
        }
        
        return chunks
    }
    
    /// –£–º–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–æ–ª–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
    private func smartTruncate(_ text: String, maxLength: Int) -> String {
        if text.count <= maxLength {
            return text
        }
        
        // –û–±—Ä–µ–∑–∞–µ–º —Å –∑–∞–ø–∞—Å–æ–º
        let truncated = String(text.prefix(maxLength - 3))
        
        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫
        if let lastSentenceEnd = truncated.lastIndex(where: { $0 == "." || $0 == "!" || $0 == "?" }) {
            return String(truncated[...lastSentenceEnd])
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç - –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–æ–±–µ–ª—É
        if let lastSpace = truncated.lastIndex(of: " ") {
            return String(truncated[...lastSpace]) + "..."
        }
        
        return truncated + "..."
    }
    
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Markdown (**bold**) –≤ HTML (<b>bold</b>) –¥–ª—è Telegram
    private func convertMarkdownToHTML(_ text: String) -> String {
        var result = text
        
        // 1. –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã (–∫—Ä–æ–º–µ < > –¥–ª—è –±—É–¥—É—â–∏—Ö —Ç–µ–≥–æ–≤)
        result = result.replacingOccurrences(of: "&", with: "&amp;")
        
        // 2. **bold** ‚Üí <b>bold</b>
        result = result.replacingOccurrences(
            of: "\\*\\*(.+?)\\*\\*",
            with: "<b>$1</b>",
            options: .regularExpression
        )
        
        // 3. –ó–∞–º–µ–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤ –Ω–∞ —Ç–æ—á–∫–∏
        result = result.replacingOccurrences(of: "‚ö°Ô∏è ", with: "‚Ä¢ ")
        result = result.replacingOccurrences(of: "üéØ ", with: "‚Ä¢ ")
        result = result.replacingOccurrences(of: "‚úàÔ∏è ", with: "‚Ä¢ ")
        result = result.replacingOccurrences(of: "üí∞ ", with: "‚Ä¢ ")
        result = result.replacingOccurrences(of: "üìç ", with: "‚Ä¢ ")
        
        // 4. –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è < > —Å–∏–º–≤–æ–ª—ã (–∫—Ä–æ–º–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤)
        result = result.replacingOccurrences(of: "<", with: "&lt;")
        result = result.replacingOccurrences(of: ">", with: "&gt;")
        
        // 5. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—à–∏ HTML —Ç–µ–≥–∏
        result = result.replacingOccurrences(of: "&lt;b&gt;", with: "<b>")
        result = result.replacingOccurrences(of: "&lt;/b&gt;", with: "</b>")
        
        return result
    }
}

