import Vapor
import Fluent

/// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram Channel (–¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –î–∑–µ–Ω)
final class TelegramChannelPublisher: ZenPublisherProtocol {
    private let client: Client
    private let botToken: String
    private let channelId: String // –ù–∞–ø—Ä–∏–º–µ—Ä: @your_channel
    private let logger: Logger
    
    init(client: Client, logger: Logger) {
        self.client = client
        self.botToken = AppConfig.telegramToken
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        let rawChannelId = AppConfig.telegramChannelId
        self.channelId = rawChannelId.hasPrefix("@") ? rawChannelId : "@\(rawChannelId)"
        self.logger = logger
    }
    
    func publish(post: ZenPostModel, db: Database) async throws -> PublishResult {
        // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ë–î
        let images = try await ZenImageModel.query(on: db)
            .filter(\.$post.$id == post.id!)
            .sort(\.$position)
            .all()
        
        return try await publishInternal(post: post, images: images, db: db)
    }
    
    private func publishInternal(post: ZenPostModel, images: [ZenImageModel], db: Database) async throws -> PublishResult {
        logger.info("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –∫–∞–Ω–∞–ª: \(channelId)")
        
        do {
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            let fullContent = formatFullContent(post: post)
            
            logger.info("üìù –û–±—â–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: \(fullContent.count) —Å–∏–º–≤–æ–ª–æ–≤")
            
            // 1. –ü—É–±–ª–∏–∫—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å caption (–ø–µ—Ä–≤—ã–µ 1024 —Å–∏–º–≤–æ–ª–∞)
            if let mainImage = images.first(where: { $0.position == 0 }) {
                let caption = formatCaption(post: post)
                logger.info("üì∏ –°–æ–æ–±—â–µ–Ω–∏–µ 1/?: –§–æ—Ç–æ + Caption (\(caption.count) —Å–∏–º–≤–æ–ª–æ–≤)")
                try await sendPhoto(url: mainImage.url, caption: caption)
                
                // 2. –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª–∏–Ω–Ω–µ–µ caption - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º
                let captionAfterMarkdown = convertMarkdownToHTML(caption).count
                if fullContent.count > captionAfterMarkdown {
                    let remainingContent = String(fullContent.dropFirst(captionAfterMarkdown))
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (Telegram –ª–∏–º–∏—Ç 4096)
                    let chunks = splitIntoChunks(remainingContent, maxLength: 4000)
                    logger.info("üìÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ \(chunks.count) —á–∞—Å—Ç–µ–π")
                    
                    for (index, chunk) in chunks.enumerated() {
                        logger.info("üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ \(index + 2)/\(chunks.count + 1): –¢–µ–∫—Å—Ç (\(chunk.count) —Å–∏–º–≤–æ–ª–æ–≤)")
                        try await sendMessage(text: chunk)
                        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        try await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫
                    }
                    
                    logger.info("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ \(chunks.count + 1) —Å–æ–æ–±—â–µ–Ω–∏–π (1 —Ñ–æ—Ç–æ + \(chunks.count) —Ç–µ–∫—Å—Ç–æ–≤)")
                } else {
                    logger.info("‚úÖ –í–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–º–µ—Å—Ç–∏–ª—Å—è –≤ caption")
                }
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–æ —á–∞—Å—Ç—è–º
                let chunks = splitIntoChunks(fullContent, maxLength: 4000)
                logger.info("üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ —Ñ–æ—Ç–æ, —Ä–∞–∑–±–∏—Ç –Ω–∞ \(chunks.count) —á–∞—Å—Ç–µ–π")
                
                for (index, chunk) in chunks.enumerated() {
                    logger.info("üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ \(index + 1)/\(chunks.count): –¢–µ–∫—Å—Ç (\(chunk.count) —Å–∏–º–≤–æ–ª–æ–≤)")
                    try await sendMessage(text: chunk)
                    if chunks.count > 1 {
                        try await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫
                    }
                }
                
                logger.info("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ \(chunks.count) —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            }
            
        // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
        post.status = .published
        post.publishedAt = Date()
        post.zenArticleId = "tg_\(UUID().uuidString.prefix(12))"
        try await post.save(on: db)
        
        logger.info("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram: \(post.title)")
            
            return PublishResult(
                success: true,
                zenArticleId: post.zenArticleId,
                publishedURL: "https://t.me/\(channelId.replacingOccurrences(of: "@", with: ""))",
                errorMessage: nil
            )
            
        } catch {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: \(error)")
            return PublishResult(
                success: false,
                zenArticleId: nil,
                publishedURL: nil,
                errorMessage: error.localizedDescription
            )
        }
    }
    
    private func sendPhoto(url: String, caption: String) async throws {
        let apiUrl = URI(string: "https://api.telegram.org/bot\(botToken)/sendPhoto")
        
        var request = ClientRequest(method: .POST, url: apiUrl)
        request.headers.add(name: .contentType, value: "application/json")
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML –¥–ª—è Telegram
        let htmlCaption = convertMarkdownToHTML(caption)
        
        let body: [String: Any] = [
            "chat_id": channelId,
            "photo": url,
            "caption": htmlCaption,
            "parse_mode": "HTML"
        ]
        
        let data = try JSONSerialization.data(withJSONObject: body)
        request.body = .init(data: data)
        
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ç–æ –≤ Telegram: \(url)")
        logger.info("üì¶ –†–∞–∑–º–µ—Ä JSON payload: \(data.count) –±–∞–π—Ç")
        
        let response = try await client.send(request)
        
        guard response.status == .ok else {
            let errorBody = response.body.map { String(buffer: $0) } ?? "No error body"
            logger.error("‚ùå Telegram API sendPhoto error!")
            logger.error("   Status: \(response.status.code) \(response.status.reasonPhrase)")
            logger.error("   Body: \(errorBody)")
            logger.error("   Photo URL: \(url)")
            logger.error("   Payload size: \(data.count) –±–∞–π—Ç")
            throw Abort(.internalServerError, reason: "Telegram API error: \(response.status.code) \(response.status.reasonPhrase)")
        }
        
        logger.info("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    }
    
    private func sendMessage(text: String) async throws {
        let apiUrl = URI(string: "https://api.telegram.org/bot\(botToken)/sendMessage")
        
        var request = ClientRequest(method: .POST, url: apiUrl)
        request.headers.add(name: .contentType, value: "application/json")
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML –¥–ª—è Telegram
        let htmlText = convertMarkdownToHTML(text)
        
        let body: [String: Any] = [
            "chat_id": channelId,
            "text": htmlText,
            "parse_mode": "HTML",
            "disable_web_page_preview": false
        ]
        
        let data = try JSONSerialization.data(withJSONObject: body)
        request.body = .init(data: data)
        
        let response = try await client.send(request)
        
        guard response.status == .ok else {
            throw Abort(.internalServerError, reason: "Telegram API error: \(response.status)")
        }
    }
    
    private func formatCaption(post: ZenPostModel) -> String {
        // Telegram caption –°–¢–†–û–ì–ò–ô –ª–∏–º–∏—Ç: 1024 —Å–∏–º–≤–æ–ª–∞
        var caption = ""
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
        let title = post.title.prefix(1).uppercased() + post.title.dropFirst()
        caption += "**\(title)**"
        
        if let subtitle = post.subtitle, !subtitle.isEmpty {
            let sub = subtitle.prefix(1).uppercased() + subtitle.dropFirst()
            caption += "\n\n\(sub)"
        }
        
        // –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ —É–∂–µ –∑–∞–Ω—è—Ç–æ
        let headerLength = caption.count + 4 // +4 –Ω–∞ \n\n
        let maxBodyLength = 1024 - headerLength - 10 // -10 –Ω–∞ ... –∏ –∑–∞–ø–∞—Å
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª–æ body (—É–º–Ω–æ –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º)
        if maxBodyLength > 100 {
            let bodyPreview = smartTruncate(post.body, maxLength: maxBodyLength)
            caption += "\n\n\(bodyPreview)"
        }
        
        return caption
    }
    
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–≤–µ—Å—å —Ç–µ–∫—Å—Ç)
    private func formatFullContent(post: ZenPostModel) -> String {
        var content = ""
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
        let title = post.title.prefix(1).uppercased() + post.title.dropFirst()
        content += "**\(title)**"
        
        if let subtitle = post.subtitle, !subtitle.isEmpty {
            let sub = subtitle.prefix(1).uppercased() + subtitle.dropFirst()
            content += "\n\n\(sub)"
        }
        
        // –í–µ—Å—å body
        content += "\n\n\(post.body)"
        
        // –•–µ—à—Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ
        content += "\n\n#–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è #–¥–µ—à–µ–≤—ã–µ–ø–æ–ª–µ—Ç—ã #–æ—Ç–ø—É—Å–∫"
        
        return content
    }
    
    /// –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ maxLength, —É–º–Ω–æ (–ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º)
    private func splitIntoChunks(_ text: String, maxLength: Int) -> [String] {
        if text.count <= maxLength {
            return [text]
        }
        
        var chunks: [String] = []
        var remaining = text
        
        while !remaining.isEmpty {
            if remaining.count <= maxLength {
                chunks.append(remaining)
                break
            }
            
            // –ë–µ—Ä—ë–º –∫—É—Å–æ–∫ —Å –∑–∞–ø–∞—Å–æ–º
            let chunk = String(remaining.prefix(maxLength - 3))
            
            // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫
            if let lastSentenceEnd = chunk.lastIndex(where: { $0 == "." || $0 == "!" || $0 == "?" }) {
                let chunkText = String(chunk[...lastSentenceEnd])
                chunks.append(chunkText)
                remaining = String(remaining.dropFirst(chunkText.count))
            } else if let lastSpace = chunk.lastIndex(of: " ") {
                // –ï—Å–ª–∏ –Ω–µ—Ç - –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–æ–±–µ–ª—É
                let chunkText = String(chunk[...lastSpace])
                chunks.append(chunkText)
                remaining = String(remaining.dropFirst(chunkText.count))
            } else {
                // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ - –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–µ–∑–∞–µ–º
                chunks.append(chunk)
                remaining = String(remaining.dropFirst(chunk.count))
            }
            
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫—É—Å–∫–∞
            remaining = remaining.trimmingCharacters(in: .whitespacesAndNewlines)
        }
        
        return chunks
    }
    
    /// –£–º–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–æ–ª–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
    private func smartTruncate(_ text: String, maxLength: Int) -> String {
        if text.count <= maxLength {
            return text
        }
        
        // –û–±—Ä–µ–∑–∞–µ–º —Å –∑–∞–ø–∞—Å–æ–º
        let truncated = String(text.prefix(maxLength - 3))
        
        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫
        if let lastSentenceEnd = truncated.lastIndex(where: { $0 == "." || $0 == "!" || $0 == "?" }) {
            return String(truncated[...lastSentenceEnd])
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç - –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–æ–±–µ–ª—É
        if let lastSpace = truncated.lastIndex(of: " ") {
            return String(truncated[...lastSpace]) + "..."
        }
        
        return truncated + "..."
    }
    
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Markdown (**bold**) –≤ HTML (<b>bold</b>) –¥–ª—è Telegram
    private func convertMarkdownToHTML(_ text: String) -> String {
        var result = text
        
        // 1. –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã (–∫—Ä–æ–º–µ < > –¥–ª—è –±—É–¥—É—â–∏—Ö —Ç–µ–≥–æ–≤)
        result = result.replacingOccurrences(of: "&", with: "&amp;")
        
        // 2. **bold** ‚Üí <b>bold</b>
        result = result.replacingOccurrences(
            of: "\\*\\*(.+?)\\*\\*",
            with: "<b>$1</b>",
            options: .regularExpression
        )
        
        // 3. –ó–∞–º–µ–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤ –Ω–∞ —Ç–æ—á–∫–∏
        result = result.replacingOccurrences(of: "‚ö°Ô∏è ", with: "‚Ä¢ ")
        result = result.replacingOccurrences(of: "üéØ ", with: "‚Ä¢ ")
        result = result.replacingOccurrences(of: "‚úàÔ∏è ", with: "‚Ä¢ ")
        result = result.replacingOccurrences(of: "üí∞ ", with: "‚Ä¢ ")
        result = result.replacingOccurrences(of: "üìç ", with: "‚Ä¢ ")
        
        return result
    }
}

