import Vapor
import Fluent

/// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram Channel (–¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –î–∑–µ–Ω)
final class TelegramChannelPublisher: ZenPublisherProtocol {
    private let client: Client
    private let botToken: String
    private let channelId: String // –ù–∞–ø—Ä–∏–º–µ—Ä: @your_channel
    private let logger: Logger
    
    init(client: Client, logger: Logger) {
        self.client = client
        self.botToken = AppConfig.telegramToken
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        let rawChannelId = AppConfig.telegramChannelId
        self.channelId = rawChannelId.hasPrefix("@") ? rawChannelId : "@\(rawChannelId)"
        self.logger = logger
    }
    
    func publish(post: ZenPostModel, db: Database) async throws -> PublishResult {
        // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ë–î
        let images = try await ZenImageModel.query(on: db)
            .filter(\.$post.$id == post.id!)
            .sort(\.$position)
            .all()
        
        return try await publishInternal(post: post, images: images, db: db)
    }
    
    private func publishInternal(post: ZenPostModel, images: [ZenImageModel], db: Database) async throws -> PublishResult {
        logger.info("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –∫–∞–Ω–∞–ª: \(channelId)")
        
        do {
            // 1. –ü—É–±–ª–∏–∫—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if let mainImage = images.first(where: { $0.position == 0 }) {
                try await sendPhoto(url: mainImage.url, caption: formatCaption(post: post))
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                try await sendMessage(text: formatMessage(post: post))
            }
            
        // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
        post.status = .published
        post.publishedAt = Date()
        post.zenArticleId = "tg_\(UUID().uuidString.prefix(12))"
        try await post.save(on: db)
        
        logger.info("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram: \(post.title)")
            
            return PublishResult(
                success: true,
                zenArticleId: post.zenArticleId,
                publishedURL: "https://t.me/\(channelId.replacingOccurrences(of: "@", with: ""))",
                errorMessage: nil
            )
            
        } catch {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: \(error)")
            return PublishResult(
                success: false,
                zenArticleId: nil,
                publishedURL: nil,
                errorMessage: error.localizedDescription
            )
        }
    }
    
    private func sendPhoto(url: String, caption: String) async throws {
        let apiUrl = URI(string: "https://api.telegram.org/bot\(botToken)/sendPhoto")
        
        var request = ClientRequest(method: .POST, url: apiUrl)
        request.headers.add(name: .contentType, value: "application/json")
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML –¥–ª—è Telegram
        let htmlCaption = convertMarkdownToHTML(caption)
        
        let body: [String: Any] = [
            "chat_id": channelId,
            "photo": url,
            "caption": htmlCaption,
            "parse_mode": "HTML"
        ]
        
        let data = try JSONSerialization.data(withJSONObject: body)
        request.body = .init(data: data)
        
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ç–æ –≤ Telegram: \(url)")
        logger.info("üì¶ –†–∞–∑–º–µ—Ä JSON payload: \(data.count) –±–∞–π—Ç")
        
        let response = try await client.send(request)
        
        guard response.status == .ok else {
            let errorBody = response.body.map { String(buffer: $0) } ?? "No error body"
            logger.error("‚ùå Telegram API sendPhoto error!")
            logger.error("   Status: \(response.status.code) \(response.status.reasonPhrase)")
            logger.error("   Body: \(errorBody)")
            logger.error("   Photo URL: \(url)")
            logger.error("   Payload size: \(data.count) –±–∞–π—Ç")
            throw Abort(.internalServerError, reason: "Telegram API error: \(response.status.code) \(response.status.reasonPhrase)")
        }
        
        logger.info("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    }
    
    private func sendMessage(text: String) async throws {
        let apiUrl = URI(string: "https://api.telegram.org/bot\(botToken)/sendMessage")
        
        var request = ClientRequest(method: .POST, url: apiUrl)
        request.headers.add(name: .contentType, value: "application/json")
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML –¥–ª—è Telegram
        let htmlText = convertMarkdownToHTML(text)
        
        let body: [String: Any] = [
            "chat_id": channelId,
            "text": htmlText,
            "parse_mode": "HTML",
            "disable_web_page_preview": false
        ]
        
        let data = try JSONSerialization.data(withJSONObject: body)
        request.body = .init(data: data)
        
        let response = try await client.send(request)
        
        guard response.status == .ok else {
            throw Abort(.internalServerError, reason: "Telegram API error: \(response.status)")
        }
    }
    
    private func formatCaption(post: ZenPostModel) -> String {
        // Telegram caption –ª–∏–º–∏—Ç: 1024 —Å–∏–º–≤–æ–ª–∞
        var caption = ""
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
        let title = post.title.prefix(1).uppercased() + post.title.dropFirst()
        caption += "**\(title)**"
        
        if let subtitle = post.subtitle, !subtitle.isEmpty {
            caption += "\n\n\(subtitle)"
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º —Ç–µ–∫—Å—Ç–∞ (Telegram caption –ª–∏–º–∏—Ç 1024)
        caption += "\n\n\(post.body)"
        
        // Telegram –æ–±—Ä–µ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ 1024, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if caption.count > 1020 {
            caption = String(caption.prefix(1020)) + "..."
        }
        
        return caption
    }
    
    private func formatMessage(post: ZenPostModel) -> String {
        // Telegram message –ª–∏–º–∏—Ç: 4096 —Å–∏–º–≤–æ–ª–æ–≤
        var message = ""
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
        let title = post.title.prefix(1).uppercased() + post.title.dropFirst()
        message += "**\(title)**"
        
        if let subtitle = post.subtitle, !subtitle.isEmpty {
            message += "\n\n\(subtitle)"
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º —Ç–µ–∫—Å—Ç–∞ (Telegram message –ª–∏–º–∏—Ç 4096)
        message += "\n\n\(post.body)"
        
        // –•–µ—à—Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ
        message += "\n\n#–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è #–¥–µ—à–µ–≤—ã–µ–ø–æ–ª–µ—Ç—ã #–æ—Ç–ø—É—Å–∫"
        
        // Telegram –æ–±—Ä–µ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ 4096
        if message.count > 4090 {
            message = String(message.prefix(4090)) + "..."
        }
        
        return message
    }
    
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Markdown (**bold**) –≤ HTML (<b>bold</b>) –¥–ª—è Telegram
    private func convertMarkdownToHTML(_ text: String) -> String {
        var result = text
        
        // 1. –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã (–∫—Ä–æ–º–µ < > –¥–ª—è –±—É–¥—É—â–∏—Ö —Ç–µ–≥–æ–≤)
        result = result.replacingOccurrences(of: "&", with: "&amp;")
        
        // 2. **bold** ‚Üí <b>bold</b>
        result = result.replacingOccurrences(
            of: "\\*\\*(.+?)\\*\\*",
            with: "<b>$1</b>",
            options: .regularExpression
        )
        
        // 3. –ó–∞–º–µ–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤ –Ω–∞ —Ç–æ—á–∫–∏
        result = result.replacingOccurrences(of: "‚ö°Ô∏è ", with: "‚Ä¢ ")
        result = result.replacingOccurrences(of: "üéØ ", with: "‚Ä¢ ")
        result = result.replacingOccurrences(of: "‚úàÔ∏è ", with: "‚Ä¢ ")
        result = result.replacingOccurrences(of: "üí∞ ", with: "‚Ä¢ ")
        result = result.replacingOccurrences(of: "üìç ", with: "‚Ä¢ ")
        
        return result
    }
}

