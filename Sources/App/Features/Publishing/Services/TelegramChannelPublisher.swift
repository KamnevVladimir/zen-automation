import Vapor
import Fluent

/// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram Channel (–¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –î–∑–µ–Ω)
final class TelegramChannelPublisher: ZenPublisherProtocol {
    private let client: Client
    private let botToken: String
    private let channelId: String // –ù–∞–ø—Ä–∏–º–µ—Ä: @your_channel
    private let logger: Logger
    
    init(client: Client, logger: Logger) {
        self.client = client
        self.botToken = AppConfig.telegramToken
        self.channelId = AppConfig.telegramChannelId
        self.logger = logger
    }
    
    func publish(post: ZenPostModel, db: Database) async throws -> PublishResult {
        // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ë–î
        let images = try await ZenImageModel.query(on: db)
            .filter(\.$post.$id == post.id!)
            .sort(\.$position)
            .all()
        
        return try await publishInternal(post: post, images: images, db: db)
    }
    
    private func publishInternal(post: ZenPostModel, images: [ZenImageModel], db: Database) async throws -> PublishResult {
        logger.info("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –∫–∞–Ω–∞–ª: \(channelId)")
        
        do {
            // 1. –ü—É–±–ª–∏–∫—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if let mainImage = images.first(where: { $0.position == 0 }) {
                try await sendPhoto(url: mainImage.url, caption: formatCaption(post: post))
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                try await sendMessage(text: formatMessage(post: post))
            }
            
        // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
        post.status = .published
        post.publishedAt = Date()
        post.zenArticleId = "tg_\(UUID().uuidString.prefix(12))"
        try await post.save(on: db)
        
        logger.info("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram: \(post.title)")
            
            return PublishResult(
                success: true,
                zenArticleId: post.zenArticleId,
                publishedURL: "https://t.me/\(channelId.replacingOccurrences(of: "@", with: ""))",
                errorMessage: nil
            )
            
        } catch {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: \(error)")
            return PublishResult(
                success: false,
                zenArticleId: nil,
                publishedURL: nil,
                errorMessage: error.localizedDescription
            )
        }
    }
    
    private func sendPhoto(url: String, caption: String) async throws {
        let apiUrl = URI(string: "https://api.telegram.org/bot\(botToken)/sendPhoto")
        
        var request = ClientRequest(method: .POST, url: apiUrl)
        request.headers.add(name: .contentType, value: "application/json")
        
        let body: [String: Any] = [
            "chat_id": channelId,
            "photo": url,
            "caption": caption.truncate(to: 1024, addEllipsis: true)
            // –ë–µ–∑ parse_mode: –î–∑–µ–Ω –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        ]
        
        let data = try JSONSerialization.data(withJSONObject: body)
        request.body = .init(data: data)
        
        let response = try await client.send(request)
        
        guard response.status == .ok else {
            throw Abort(.internalServerError, reason: "Telegram API error: \(response.status)")
        }
    }
    
    private func sendMessage(text: String) async throws {
        let apiUrl = URI(string: "https://api.telegram.org/bot\(botToken)/sendMessage")
        
        var request = ClientRequest(method: .POST, url: apiUrl)
        request.headers.add(name: .contentType, value: "application/json")
        
        let body: [String: Any] = [
            "chat_id": channelId,
            "text": text.truncate(to: 4096, addEllipsis: true),
            "disable_web_page_preview": false
            // –ë–µ–∑ parse_mode: –î–∑–µ–Ω –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        ]
        
        let data = try JSONSerialization.data(withJSONObject: body)
        request.body = .init(data: data)
        
        let response = try await client.send(request)
        
        guard response.status == .ok else {
            throw Abort(.internalServerError, reason: "Telegram API error: \(response.status)")
        }
    }
    
    private func formatCaption(post: ZenPostModel) -> String {
        // –í–ê–ñ–ù–û: –î–∑–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ü–ï–†–í–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–º–∞–∫—Å 140 —Å–∏–º–≤–æ–ª–æ–≤)
        // –∏ –ù–ï –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ! –ü–æ—ç—Ç–æ–º—É –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ë–ï–ó HTML —Ç–µ–≥–æ–≤.
        let firstSentence = post.title.truncate(to: 140, addEllipsis: false)
        
        var caption = firstSentence
        
        if let subtitle = post.subtitle, !subtitle.isEmpty {
            caption += "\n\n\(subtitle)"
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–ª–∞ —Å—Ç–∞—Ç—å–∏
        let bodyPreview = post.body
            .replacingOccurrences(of: "\n\n", with: "\n")
            .truncate(to: 600, addEllipsis: true)
        
        caption += "\n\n\(bodyPreview)"
        
        return caption
    }
    
    private func formatMessage(post: ZenPostModel) -> String {
        // –í–ê–ñ–ù–û: –î–∑–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ü–ï–†–í–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–º–∞–∫—Å 140 —Å–∏–º–≤–æ–ª–æ–≤)
        // –∏ –ù–ï –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ! –ü–æ—ç—Ç–æ–º—É –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ë–ï–ó HTML —Ç–µ–≥–æ–≤.
        let firstSentence = post.title.truncate(to: 140, addEllipsis: false)
        
        var message = firstSentence
        
        if let subtitle = post.subtitle, !subtitle.isEmpty {
            message += "\n\n\(subtitle)"
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ —Å—Ç–∞—Ç—å–∏
        let bodyText = post.body
            .replacingOccurrences(of: "\n\n", with: "\n")
            .truncate(to: 3600, addEllipsis: true)
        
        message += "\n\n\(bodyText)"
        
        // –•–µ—à—Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ
        message += "\n\n#–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è #–¥–µ—à–µ–≤—ã–µ–ø–æ–ª–µ—Ç—ã #–æ—Ç–ø—É—Å–∫"
        
        return message
    }
}

