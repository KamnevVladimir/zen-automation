import Vapor
import Fluent

protocol ZenPublisherProtocol {
    func publish(post: ZenPostModel, db: Database) async throws -> PublishResult
}

struct PublishResult: Content {
    let success: Bool
    let zenArticleId: String?
    let publishedURL: String?
    let errorMessage: String?
}

final class ZenPublisher: ZenPublisherProtocol {
    private let logger: Logger
    private let notifier: TelegramNotifierProtocol
    
    init(logger: Logger, notifier: TelegramNotifierProtocol) {
        self.logger = logger
        self.notifier = notifier
    }
    
    func publish(post: ZenPostModel, db: Database) async throws -> PublishResult {
        logger.info("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞: \(post.title)")
        
        // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω API
        // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        
        // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
        post.status = .published
        post.publishedAt = Date()
        post.zenArticleId = "zen_\(UUID().uuidString.prefix(12))"
        
        try await post.save(on: db)
        
        // 2. –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        let imagesCount = try await ZenImageModel.query(on: db)
            .filter(\.$post.$id == post.id!)
            .count()
        
        // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try await notifier.sendPostPublished(post: post, images: imagesCount)
        
        logger.info("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: \(post.zenArticleId ?? "N/A")")
        
        return PublishResult(
            success: true,
            zenArticleId: post.zenArticleId,
            publishedURL: "https://dzen.ru/id/\(post.zenArticleId ?? "")",
            errorMessage: nil
        )
    }
}

// MARK: - RSS Publisher (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)

final class RSSPublisher {
    func generateRSSFeed(posts: [ZenPostModel]) -> String {
        let rssItems = posts.map { post -> String in
            """
            <item>
                <title><![CDATA[\(post.title)]]></title>
                <description><![CDATA[\(post.body.prefix(500))...]]></description>
                <link>https://dzen.ru/article/\(post.zenArticleId ?? "")</link>
                <guid isPermaLink="false">\(post.id?.uuidString ?? "")</guid>
                <pubDate>\(formatRFC822Date(post.publishedAt ?? Date()))</pubDate>
            </item>
            """
        }.joined(separator: "\n")
        
        return """
        <?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
            <channel>
                <title>–î–µ—à—ë–≤—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è</title>
                <link>https://t.me/gdeVacationBot</link>
                <description>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç—ã –ø—Ä–æ –±—é–¥–∂–µ—Ç–Ω—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è</description>
                <language>ru</language>
                <lastBuildDate>\(formatRFC822Date(Date()))</lastBuildDate>
                <atom:link href="https://your-domain.com/rss" rel="self" type="application/rss+xml" />
                \(rssItems)
            </channel>
        </rss>
        """
    }
    
    private func formatRFC822Date(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "EEE, dd MMM yyyy HH:mm:ss Z"
        formatter.locale = Locale(identifier: "en_US_POSIX")
        return formatter.string(from: date)
    }
}

