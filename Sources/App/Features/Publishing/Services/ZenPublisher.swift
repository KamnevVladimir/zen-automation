import Vapor
import Fluent

protocol ZenPublisherProtocol {
    func publish(post: ZenPostModel, db: Database) async throws -> PublishResult
}

struct PublishResult: Content {
    let success: Bool
    let zenArticleId: String?
    let publishedURL: String?
    let errorMessage: String?
}

final class ZenPublisher: ZenPublisherProtocol {
    private let logger: Logger
    private let notifier: TelegramNotifierProtocol
    
    init(logger: Logger, notifier: TelegramNotifierProtocol) {
        self.logger = logger
        self.notifier = notifier
    }
    
    func publish(post: ZenPostModel, db: Database) async throws -> PublishResult {
        logger.info("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞: \(post.title)")
        
        // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
        post.status = .published
        post.publishedAt = Date()
        post.zenArticleId = "zen_\(UUID().uuidString.prefix(12))"
        
        try await post.save(on: db)
        
        // 2. –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let images = try await ZenImageModel.query(on: db)
            .filter(\.$post.$id == post.id!)
            .all()
        
        // 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram —Å –≥–æ—Ç–æ–≤—ã–º –ø–æ—Å—Ç–æ–º
        let shortPostCount = post.shortPost?.count ?? 0
        let fullPostCount = post.fullPost?.count ?? 0
        let totalCount = shortPostCount + fullPostCount
        
        let message = """
        ‚úÖ <b>–ù–æ–≤—ã–π –ø–æ—Å—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>
        
        üìù <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> \(post.title)
        
        üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
        ‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç (Telegram): \(shortPostCount) —Å–∏–º–≤–æ–ª–æ–≤
        ‚Ä¢ –ü–æ–ª–Ω—ã–π –ø–æ—Å—Ç (Telegraph): \(fullPostCount) —Å–∏–º–≤–æ–ª–æ–≤
        ‚Ä¢ –í—Å–µ–≥–æ: \(totalCount) —Å–∏–º–≤–æ–ª–æ–≤
        ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: \(images.count)
        ‚Ä¢ –¢–µ–≥–∏: \(post.tags.joined(separator: ", "))
        
        üîó <b>–°—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>
        \(images.map { "‚Ä¢ \($0.url)" }.joined(separator: "\n"))
        
        üìÑ <b>–ö–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –¥–ª—è Telegram:</b>
        
        <b>\(post.title)</b>
        
        \((post.shortPost ?? "").truncate(to: 500, addEllipsis: true))
        
        üí° <i>–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegraph</i>
        """
        
        // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –≥–æ—Ç–æ–≤—ã–º –ø–æ—Å—Ç–æ–º
        try await notifier.sendNotification(message: message)
        
        logger.info("‚úÖ –ü–æ—Å—Ç –≥–æ—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        
        return PublishResult(
            success: true,
            zenArticleId: post.zenArticleId,
            publishedURL: nil,
            errorMessage: nil
        )
    }
}

// MARK: - RSS Publisher (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)

final class RSSPublisher {
    func generateRSSFeed(posts: [ZenPostModel]) -> String {
        let rssItems = posts.map { post -> String in
            let description = post.shortPost ?? post.fullPost ?? ""
            return """
            <item>
                <title><![CDATA[\(post.title)]]></title>
                <description><![CDATA[\(description.prefix(500))...]]></description>
                <link>https://dzen.ru/article/\(post.zenArticleId ?? "")</link>
                <guid isPermaLink="false">\(post.id?.uuidString ?? "")</guid>
                <pubDate>\(formatRFC822Date(post.publishedAt ?? Date()))</pubDate>
            </item>
            """
        }.joined(separator: "\n")
        
        return """
        <?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
            <channel>
                <title>–î–µ—à—ë–≤—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è</title>
                <link>https://t.me/gdeVacationBot</link>
                <description>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç—ã –ø—Ä–æ –±—é–¥–∂–µ—Ç–Ω—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è</description>
                <language>ru</language>
                <lastBuildDate>\(formatRFC822Date(Date()))</lastBuildDate>
                <atom:link href="https://your-domain.com/rss" rel="self" type="application/rss+xml" />
                \(rssItems)
            </channel>
        </rss>
        """
    }
    
    private func formatRFC822Date(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "EEE, dd MMM yyyy HH:mm:ss Z"
        formatter.locale = Locale(identifier: "en_US_POSIX")
        return formatter.string(from: date)
    }
}

