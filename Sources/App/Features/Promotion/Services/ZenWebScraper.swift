import Vapor
import Foundation
import NIO

/// –í–µ–±-—Å–∫—Ä–∞–ø–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω–µ
final class ZenWebScraper {
    private let client: Client
    private let logger: Logger
    
    init(client: Client, logger: Logger) {
        self.client = client
        self.logger = logger
    }
    
    /// –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    func searchPosts(keywords: [String], limit: Int = 10) async throws -> [ZenPostTarget] {
        logger.info("üîç –ò—â—É –ø–æ—Å—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: \(keywords.joined(separator: ", "))")
        
        var posts: [ZenPostTarget] = []
        
        for keyword in keywords.prefix(3) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            do {
                let searchResults = try await searchPostsByKeyword(keyword)
                posts.append(contentsOf: searchResults)
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–∏–∑–±–µ–≥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
                try await Task.sleep(nanoseconds: 2_000_000_000) // 2 —Å–µ–∫—É–Ω–¥—ã
                
            } catch {
                logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '\(keyword)': \(error)")
            }
        }
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        let uniquePosts = Array(Set(posts))
            .sorted { $0.commentCount > $1.commentCount }
            .prefix(limit)
        
        logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ \(uniquePosts.count) —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        
        return Array(uniquePosts)
    }
    
    /// –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
    private func searchPostsByKeyword(_ keyword: String) async throws -> [ZenPostTarget] {
        // URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω–µ
        let searchUrl = "https://zen.yandex.ru/search?query=\(keyword.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) ?? keyword)"
        
        var request = ClientRequest(method: .GET, url: URI(string: searchUrl))
        request.headers.add(name: .userAgent, value: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36")
        request.headers.add(name: .accept, value: "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
        
        let response = try await client.send(request)
        
        guard response.status == .ok else {
            throw Abort(.badRequest, reason: "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ –î–∑–µ–Ω–µ: \(response.status)")
        }
        
        let body = response.body.map { String(buffer: $0) } ?? ""
        
        // –ü–∞—Ä—Å–∏–º HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å—Ç—ã
        return try parsePostsFromHTML(body, keyword: keyword)
    }
    
    /// –ü–∞—Ä—Å–∏–Ω–≥ HTML –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
    private func parsePostsFromHTML(_ html: String, keyword: String) throws -> [ZenPostTarget] {
        var posts: [ZenPostTarget] = []
        
        // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ HTML (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SwiftSoup)
        let postPattern = #"<a[^>]*href="([^"]*zen\.yandex\.ru[^"]*)"[^>]*>([^<]*)</a>"#
        let regex = try NSRegularExpression(pattern: postPattern, options: [])
        let matches = regex.matches(in: html, options: [], range: NSRange(location: 0, length: html.utf16.count))
        
        for match in matches.prefix(5) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if let urlRange = Range(match.range(at: 1), in: html),
               let titleRange = Range(match.range(at: 2), in: html) {
                
                let url = String(html[urlRange])
                let title = String(html[titleRange])
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å—Ç –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö
                if isTravelRelated(title) {
                    let post = ZenPostTarget(
                        url: url,
                        title: title,
                        author: "Unknown", // –ú–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –∏–∑ HTML
                        commentCount: 0, // –ú–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –∏–∑ HTML
                        keywords: [keyword]
                    )
                    posts.append(post)
                }
            }
        }
        
        return posts
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –ø–æ—Å—Ç –∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º
    private func isTravelRelated(_ title: String) -> Bool {
        let travelKeywords = [
            "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ", "–æ—Ç–ø—É—Å–∫", "–æ—Ç–¥—ã—Ö", "—Ç—É—Ä–∏–∑–º", "–±–∏–ª–µ—Ç—ã",
            "–æ—Ç–µ–ª—å", "–≤–∏–∑–∞", "–ø–∞—Å–ø–æ—Ä—Ç", "—Å–∞–º–æ–ª–µ—Ç", "–ø–æ–µ–∑–¥",
            "—Å—Ç—Ä–∞–Ω–∞", "–≥–æ—Ä–æ–¥", "–º–æ—Ä–µ", "–≥–æ—Ä—ã", "–ø–ª—è–∂"
        ]
        
        let lowercaseTitle = title.lowercased()
        return travelKeywords.contains { lowercaseTitle.contains($0) }
    }
    
    /// –ü–æ–∏—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É
    func getComments(from postUrl: String) async throws -> [CommentQuestion] {
        logger.info("üí¨ –ü–æ–ª—É—á–∞—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É: \(postUrl)")
        
        var request = ClientRequest(method: .GET, url: URI(string: postUrl))
        request.headers.add(name: .userAgent, value: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36")
        request.headers.add(name: .accept, value: "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
        
        let response = try await client.send(request)
        
        guard response.status == .ok else {
            throw Abort(.badRequest, reason: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞: \(response.status)")
        }
        
        let body = response.body.map { String(buffer: $0) } ?? ""
        
        // –ü–∞—Ä—Å–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        return try parseCommentsFromHTML(body, postUrl: postUrl)
    }
    
    /// –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ HTML
    private func parseCommentsFromHTML(_ html: String, postUrl: String) throws -> [CommentQuestion] {
        var comments: [CommentQuestion] = []
        
        // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SwiftSoup)
        let commentPattern = #"<div[^>]*class="[^"]*comment[^"]*"[^>]*>([^<]*)</div>"#
        let regex = try NSRegularExpression(pattern: commentPattern, options: [])
        let matches = regex.matches(in: html, options: [], range: NSRange(location: 0, length: html.utf16.count))
        
        for (index, match) in matches.enumerated() {
            if let textRange = Range(match.range(at: 1), in: html) {
                let text = String(html[textRange]).trimmingCharacters(in: .whitespacesAndNewlines)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤–æ–ø—Ä–æ—Å–æ–º
                if isQuestion(text) {
                    let comment = CommentQuestion(
                        id: "comment_\(index)",
                        text: text,
                        author: "User_\(index)",
                        postUrl: postUrl,
                        timestamp: Date(),
                        isAnswered: false
                    )
                    comments.append(comment)
                }
            }
        }
        
        return comments
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–æ–º
    private func isQuestion(_ text: String) -> Bool {
        let questionWords = ["?", "–∫–∞–∫", "–≥–¥–µ", "—á—Ç–æ", "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "—Å–∫–æ–ª—å–∫–æ", "–º–æ–∂–Ω–æ –ª–∏"]
        let lowercaseText = text.lowercased()
        return questionWords.contains { lowercaseText.contains($0) }
    }
}

// MARK: - –†–∞—Å—à–∏—Ä–µ–Ω–∏—è

extension ZenWebScraper: ZenEngagementServiceProtocol {
    func findPostsForCommenting(keywords: [String]) async throws -> [ZenPostTarget] {
        return try await searchPosts(keywords: keywords, limit: 10)
    }
    
    func findQuestionsInComments(postUrl: String) async throws -> [CommentQuestion] {
        return try await getComments(from: postUrl)
    }
    
    func generateSmartResponse(to question: CommentQuestion) async throws -> String {
        // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ AI
        return "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ @gdeVacationBot"
    }
    
    func postComment(to postUrl: String, comment: String) async throws -> Bool {
        // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        logger.info("üí¨ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: \(comment)")
        return true
    }
    
    func analyzeEngagement() async throws -> EngagementStats {
        return EngagementStats(
            totalComments: 0,
            helpfulResponses: 0,
            newSubscribers: 0,
            engagementRate: 0.0
        )
    }
}
