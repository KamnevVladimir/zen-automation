import Vapor
import Fluent

/// –£–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–º–æ-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–∞—à–∏—Ö —Å—Ç–∞—Ç–µ–π
final class SmartPromoService {
    private let client: Client
    private let logger: Logger
    private let aiClient: AIClientProtocol
    
    init(client: Client, logger: Logger, aiClient: AIClientProtocol) {
        self.client = client
        self.logger = logger
        self.aiClient = aiClient
    }
    
    /// –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã –≤ –î–∑–µ–Ω–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ù–ê–®–ò–• —Å—Ç–∞—Ç–µ–π
    func findPostsWithSmartResponses(db: Database) async throws -> [PromoSuggestion] {
        logger.info("üîç –ò—â—É –ø–æ—Å—Ç—ã –≤ –î–∑–µ–Ω–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞—à–∏ —Å—Ç–∞—Ç—å–∏...")
        
        // 1. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
        let ourPosts = try await ZenPostModel.query(on: db)
            .filter(\.$status == .published)
            .sort(\.$publishedAt, .descending)
            .limit(10)
            .all()
        
        logger.info("üìö –ù–∞–π–¥–µ–Ω–æ \(ourPosts.count) –Ω–∞—à–∏—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        // 2. –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –î–∑–µ–Ω–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥)
        let exampleQuestions = [
            ZenQuestion(
                postUrl: "https://dzen.ru/media/id/5d9a1b2c3642b600ad8f9e12/kak-poletet-deshevo",
                postTitle: "–ö–∞–∫ –ø–æ–ª–µ—Ç–µ—Ç—å –¥—ë—à–µ–≤–æ –≤ 2025 –≥–æ–¥—É",
                question: "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –≥–¥–µ –∏—Å–∫–∞—Ç—å –¥–µ—à—ë–≤—ã–µ –±–∏–ª–µ—Ç—ã? –ö–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ?",
                category: "–±–∏–ª–µ—Ç—ã"
            ),
            ZenQuestion(
                postUrl: "https://dzen.ru/media/id/5d9a1b2c3642b600ad8f9e12/viza-v-gruziiu",
                postTitle: "–í–∏–∑–∞ –≤ –ì—Ä—É–∑–∏—é –¥–ª—è —Ä–æ—Å—Å–∏—è–Ω",
                question: "–ù—É–∂–Ω–∞ –ª–∏ –≤–∏–∑–∞ –≤ –ì—Ä—É–∑–∏—é? –ö–∞–∫ –¥–æ–ª–≥–æ –º–æ–∂–Ω–æ —Ç–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è?",
                category: "–≤–∏–∑–∞"
            ),
            ZenQuestion(
                postUrl: "https://dzen.ru/media/id/5d9a1b2c3642b600ad8f9e12/tailand-ili-vetnam",
                postTitle: "–¢–∞–∏–ª–∞–Ω–¥ –∏–ª–∏ –í—å–µ—Ç–Ω–∞–º - –∫—É–¥–∞ –ª—É—á—à–µ?",
                question: "–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –Ω—É–∂–Ω–æ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏ –æ—Ç–¥—ã—Ö–∞ –≤ –¢–∞–∏–ª–∞–Ω–¥–µ?",
                category: "–±—é–¥–∂–µ—Ç"
            ),
            ZenQuestion(
                postUrl: "https://dzen.ru/media/id/5d9a1b2c3642b600ad8f9e12/egipet-2025",
                postTitle: "–ï–≥–∏–ø–µ—Ç 2025 - –≤—Å—ë –≤–∫–ª—é—á–µ–Ω–æ",
                question: "–ö–∞–∫–∏–µ –æ—Ç–µ–ª–∏ –≤ –ï–≥–∏–ø—Ç–µ –ª—É—á—à–∏–µ –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ?",
                category: "–æ—Ç–µ–ª–∏"
            ),
            ZenQuestion(
                postUrl: "https://dzen.ru/media/id/5d9a1b2c3642b600ad8f9e12/uae-dlya-turistov",
                postTitle: "–û–ê–≠ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤ - –≥–∏–¥ 2025",
                question: "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞ –ª—É—á—à–µ –ª–µ—Ç–µ—Ç—å –≤ –û–ê–≠? –ù–µ —Å–ª–∏—à–∫–æ–º –∂–∞—Ä–∫–æ?",
                category: "–ø–æ–≥–æ–¥–∞"
            )
        ]
        
        // 3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –ù–ê–®–£ —Å—Ç–∞—Ç—å—é –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        var suggestions: [PromoSuggestion] = []
        
        for question in exampleQuestions.prefix(3) {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, –∫–∞–∫–∞—è –∏–∑ –Ω–∞—à–∏—Ö —Å—Ç–∞—Ç–µ–π –ø–æ–¥—Ö–æ–¥–∏—Ç
            let matchingArticle = try await findBestMatchingArticle(
                question: question,
                ourPosts: ourPosts
            )
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –Ω–∞—à–µ–π —Å—Ç–∞—Ç—å–∏
            let response = try await generateSmartResponse(
                question: question,
                matchingArticle: matchingArticle
            )
            
            let suggestion = PromoSuggestion(
                postUrl: question.postUrl,
                postTitle: question.postTitle,
                question: question.question,
                suggestedResponse: response.answer,
                ourArticleUrl: matchingArticle?.telegraphUrl,
                ourArticleTitle: matchingArticle?.title,
                relevanceScore: response.relevanceScore
            )
            
            suggestions.append(suggestion)
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
            try await Task.sleep(nanoseconds: 1_000_000_000) // 1 —Å–µ–∫—É–Ω–¥–∞
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        return suggestions.sorted { $0.relevanceScore > $1.relevanceScore }
    }
    
    /// –ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –Ω–∞—à—É —Å—Ç–∞—Ç—å—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    private func findBestMatchingArticle(
        question: ZenQuestion,
        ourPosts: [ZenPostModel]
    ) async throws -> MatchingArticle? {
        
        // –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        let articlesContext = ourPosts.map { post in
            """
            –°—Ç–∞—Ç—å—è: \(post.title)
            –¢–∏–ø: \(post.templateType)
            –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: \(post.shortPost?.prefix(200) ?? "")
            """
        }.joined(separator: "\n\n")
        
        let analysisPrompt = """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–π–¥–∏ –ù–ê–ò–ë–û–õ–ï–ï –ü–û–î–•–û–î–Ø–©–£–Æ —Å—Ç–∞—Ç—å—é –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.
        
        –í–û–ü–†–û–°: "\(question.question)"
        –ö–ê–¢–ï–ì–û–†–ò–Ø: \(question.category)
        
        –ù–ê–®–ò –°–¢–ê–¢–¨–ò:
        \(articlesContext)
        
        –û—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
        {
            "best_match_title": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–º–æ–π –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—Ç–∞—Ç—å–∏",
            "relevance_score": 0.85,
            "reason": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç"
        }
        
        –ï—Å–ª–∏ –ù–ò –û–î–ù–ê —Å—Ç–∞—Ç—å—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–µ—Ä–Ω–∏:
        {
            "best_match_title": null,
            "relevance_score": 0.0,
            "reason": "–Ω–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏"
        }
        """
        
        let analysisResult = try await aiClient.generateText(
            systemPrompt: "–¢—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.",
            userPrompt: analysisPrompt
        )
        
        // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
        guard let jsonData = analysisResult.data(using: .utf8),
              let json = try? JSONSerialization.jsonObject(with: jsonData) as? [String: Any],
              let bestMatchTitle = json["best_match_title"] as? String,
              let relevanceScore = json["relevance_score"] as? Double else {
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–µ–π")
            return nil
        }
        
        // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç—å—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        let matchingPost = ourPosts.first { post in
            post.title.lowercased().contains(bestMatchTitle.lowercased()) ||
            bestMatchTitle.lowercased().contains(post.title.lowercased())
        }
        
        guard let post = matchingPost, relevanceScore > 0.5 else {
            return nil // –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—Ç–∞—Ç—å–∏
        }
        
        // Telegraph URL –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ ZenPostModel
        // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ —Å–∏—Å—Ç–µ–º—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ slug
        let telegraphSlug = post.title
            .lowercased()
            .replacingOccurrences(of: " ", with: "-")
            .replacingOccurrences(of: "[^a-z–∞-—è—ë0-9-]", with: "", options: .regularExpression)
            .prefix(50)
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π Telegraph URL
        let telegraphUrl = "https://telegra.ph/\(telegraphSlug)"
        
        return MatchingArticle(
            title: post.title,
            telegraphUrl: telegraphUrl,
            relevanceScore: relevanceScore
        )
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –Ω–∞—à–µ–π —Å—Ç–∞—Ç—å–∏
    private func generateSmartResponse(
        question: ZenQuestion,
        matchingArticle: MatchingArticle?
    ) async throws -> SmartResponse {
        
        let responsePrompt: String
        
        if let article = matchingArticle, let articleUrl = article.telegraphUrl {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç–∞—Ç—å—è - —É–ø–æ–º–∏–Ω–∞–µ–º –µ—ë
            responsePrompt = """
            –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            
            –í–û–ü–†–û–°: "\(question.question)"
            
            –£ –ù–ê–° –ï–°–¢–¨ –°–¢–ê–¢–¨–Ø –ù–ê –≠–¢–£ –¢–ï–ú–£: "\(article.title)"
            –°–°–´–õ–ö–ê: \(articleUrl)
            
            –ó–ê–î–ê–ß–ê:
            1. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç (50-100 —Å–∏–º–≤–æ–ª–æ–≤)
            2. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–ø–æ–º—è–Ω–∏ –Ω–∞—à—É —Å—Ç–∞—Ç—å—é: "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–æ–º —è –Ω–∞–ø–∏—Å–∞–ª –≤ —Å—Ç–∞—Ç—å–µ: [—Å—Å—ã–ª–∫–∞]"
            3. –ú–æ–∂–µ—à—å –º—è–≥–∫–æ —É–ø–æ–º—è–Ω—É—Ç—å @gdeVacationBot –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –±–∏–ª–µ—Ç—ã
            
            –û–ë–©–ê–Ø –î–õ–ò–ù–ê: –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
            –¢–û–ù: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, –ø–æ–ª–µ–∑–Ω—ã–π
            
            –û—Ç–≤–µ—Ç—å –ë–ï–ó –∫–∞–≤—ã—á–µ–∫, —Å—Ä–∞–∑—É —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
            """
            
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—Ç–∞—Ç—å–∏ - –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
            responsePrompt = """
            –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            
            –í–û–ü–†–û–°: "\(question.question)"
            
            –ó–ê–î–ê–ß–ê:
            1. –î–∞–π –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç (–¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤)
            2. –£–ø–æ–º—è–Ω–∏ @gdeVacationBot –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –±–∏–ª–µ—Ç—ã/—Ü–µ–Ω—ã
            3. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º (—Ü–µ–Ω—ã, —Å—Ä–æ–∫–∏, —Ñ–∞–∫—Ç—ã)
            
            –¢–û–ù: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π
            
            –û—Ç–≤–µ—Ç—å –ë–ï–ó –∫–∞–≤—ã—á–µ–∫, —Å—Ä–∞–∑—É —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
            """
        }
        
        let answer = try await aiClient.generateText(
            systemPrompt: "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö.",
            userPrompt: responsePrompt
        )
        
        let relevanceScore = matchingArticle?.relevanceScore ?? 0.5
        
        return SmartResponse(
            answer: answer.trimmingCharacters(in: .whitespacesAndNewlines),
            relevanceScore: relevanceScore
        )
    }
}

// MARK: - –ú–æ–¥–µ–ª–∏

struct ZenQuestion {
    let postUrl: String
    let postTitle: String
    let question: String
    let category: String
}

struct MatchingArticle {
    let title: String
    let telegraphUrl: String?
    let relevanceScore: Double
}

struct SmartResponse {
    let answer: String
    let relevanceScore: Double
}

struct PromoSuggestion {
    let postUrl: String
    let postTitle: String
    let question: String
    let suggestedResponse: String
    let ourArticleUrl: String?
    let ourArticleTitle: String?
    let relevanceScore: Double
}
