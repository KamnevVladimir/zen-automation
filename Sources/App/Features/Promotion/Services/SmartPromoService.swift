import Vapor
import Fluent

/// –£–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–º–æ-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–∞—à–∏—Ö —Å—Ç–∞—Ç–µ–π
final class SmartPromoService {
    private let client: Client
    private let logger: Logger
    private let aiClient: AIClientProtocol
    
    init(client: Client, logger: Logger, aiClient: AIClientProtocol) {
        self.client = client
        self.logger = logger
        self.aiClient = aiClient
    }
    
    /// –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã –≤ –î–∑–µ–Ω–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ù–ê–®–ò–• —Å—Ç–∞—Ç–µ–π
    func findPostsWithSmartResponses(db: Database) async throws -> [PromoSuggestion] {
        logger.info("üîç –ò—â—É –ø–æ—Å—Ç—ã –≤ –î–∑–µ–Ω–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞—à–∏ —Å—Ç–∞—Ç—å–∏...")
        
        // 1. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
        let ourPosts = try await ZenPostModel.query(on: db)
            .filter(\.$status == .published)
            .sort(\.$publishedAt, .descending)
            .limit(10)
            .all()
        
        logger.info("üìö –ù–∞–π–¥–µ–Ω–æ \(ourPosts.count) –Ω–∞—à–∏—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        // 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º Claude –¥–ª—è –ø–æ–∏—Å–∫–∞ –†–ï–ê–õ–¨–ù–´–• –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω–µ
        logger.info("üåê Claude –∏—â–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –≤ –Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω–µ...")
        
        let searchPrompt = """
        –ù–∞–π–¥–∏ 3 –†–ï–ê–õ–¨–ù–´–• –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Å—Ç–∞ –≤ –Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω–µ –ø—Ä–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –≥–¥–µ –ª—é–¥–∏ –∞–∫—Ç–∏–≤–Ω–æ –∑–∞–¥–∞—é—Ç –≤–æ–ø—Ä–æ—Å—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö.
        
        –ö–†–ò–¢–ï–†–ò–ò –ü–û–ò–°–ö–ê:
        - –ü–æ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ: –±–∏–ª–µ—Ç—ã, –≤–∏–∑—ã, –±—é–¥–∂–µ—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π, –æ—Ç–¥—ã—Ö –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π
        - –ü–æ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ (–º–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
        - –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2-3 –º–µ—Å—è—Ü–∞ (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ)
        - –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        
        –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–∏—Å–∫ –≤ –Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω–µ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º:
        - "–≥–¥–µ –∫—É–ø–∏—Ç—å –¥–µ—à—ë–≤—ã–µ –±–∏–ª–µ—Ç—ã 2025"
        - "—Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –Ω—É–∂–Ω–æ –Ω–∞ –æ—Ç–¥—ã—Ö —Ç–∞–∏–ª–∞–Ω–¥"
        - "–≤–∏–∑–∞ —Ä–æ—Å—Å–∏—è–Ω–∞–º –∫—É–¥–∞ –Ω–µ –Ω—É–∂–Ω–∞"
        
        –í–ï–†–ù–ò JSON (—Å—Ç—Ä–æ–≥–æ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ):
        [
          {
            "url": "–ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –≤ dzen.ru",
            "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞",
            "typical_question": "—Ç–∏–ø–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
            "category": "–±–∏–ª–µ—Ç—ã/–≤–∏–∑–∞/–±—é–¥–∂–µ—Ç"
          }
        ]
        
        –í–ê–ñ–ù–û: –°—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –†–ï–ê–õ–¨–ù–´–ú–ò –∏ —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏!
        """
        
        let searchResult = try await aiClient.generateText(
            systemPrompt: "–¢—ã - –ø–æ–∏—Å–∫–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –≤ –Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω–µ. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.",
            userPrompt: searchPrompt
        )
        
        // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
        guard let jsonData = searchResult.data(using: .utf8),
              let postsArray = try? JSONSerialization.jsonObject(with: jsonData) as? [[String: Any]] else {
            logger.warning("‚ö†Ô∏è Claude –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ—Å—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã")
            // –ó–∞–ø–∞—Å–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –î–∑–µ–Ω–∞
            return try await useFallbackPosts(ourPosts: ourPosts)
        }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ ZenQuestion
        let exampleQuestions = postsArray.compactMap { post -> ZenQuestion? in
            guard let url = post["url"] as? String,
                  let title = post["title"] as? String,
                  let question = post["typical_question"] as? String,
                  let category = post["category"] as? String else {
                return nil
            }
            
            return ZenQuestion(
                postUrl: url,
                postTitle: title,
                question: question,
                category: category
            )
        }
        
        logger.info("‚úÖ Claude –Ω–∞—à—ë–ª \(exampleQuestions.count) —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        
        // 3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –ù–ê–®–£ —Å—Ç–∞—Ç—å—é –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        var suggestions: [PromoSuggestion] = []
        
        for question in exampleQuestions.prefix(3) {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, –∫–∞–∫–∞—è –∏–∑ –Ω–∞—à–∏—Ö —Å—Ç–∞—Ç–µ–π –ø–æ–¥—Ö–æ–¥–∏—Ç
            let matchingArticle = try await findBestMatchingArticle(
                question: question,
                ourPosts: ourPosts
            )
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –Ω–∞—à–µ–π —Å—Ç–∞—Ç—å–∏
            let response = try await generateSmartResponse(
                question: question,
                matchingArticle: matchingArticle
            )
            
            let suggestion = PromoSuggestion(
                postUrl: question.postUrl,
                postTitle: question.postTitle,
                question: question.question,
                suggestedResponse: response.answer,
                ourArticleUrl: matchingArticle?.zenArticleUrl,
                ourArticleTitle: matchingArticle?.title,
                relevanceScore: response.relevanceScore
            )
            
            suggestions.append(suggestion)
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
            try await Task.sleep(nanoseconds: 1_000_000_000) // 1 —Å–µ–∫—É–Ω–¥–∞
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        return suggestions.sorted { $0.relevanceScore > $1.relevanceScore }
    }
    
    /// –ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –Ω–∞—à—É —Å—Ç–∞—Ç—å—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    private func findBestMatchingArticle(
        question: ZenQuestion,
        ourPosts: [ZenPostModel]
    ) async throws -> MatchingArticle? {
        
        // –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        let articlesContext = ourPosts.map { post in
            """
            –°—Ç–∞—Ç—å—è: \(post.title)
            –¢–∏–ø: \(post.templateType)
            –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: \(post.shortPost?.prefix(200) ?? "")
            """
        }.joined(separator: "\n\n")
        
        let analysisPrompt = """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–π–¥–∏ –ù–ê–ò–ë–û–õ–ï–ï –ü–û–î–•–û–î–Ø–©–£–Æ —Å—Ç–∞—Ç—å—é –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.
        
        –í–û–ü–†–û–°: "\(question.question)"
        –ö–ê–¢–ï–ì–û–†–ò–Ø: \(question.category)
        
        –ù–ê–®–ò –°–¢–ê–¢–¨–ò:
        \(articlesContext)
        
        –û—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
        {
            "best_match_title": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–º–æ–π –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—Ç–∞—Ç—å–∏",
            "relevance_score": 0.85,
            "reason": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç"
        }
        
        –ï—Å–ª–∏ –ù–ò –û–î–ù–ê —Å—Ç–∞—Ç—å—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–µ—Ä–Ω–∏:
        {
            "best_match_title": null,
            "relevance_score": 0.0,
            "reason": "–Ω–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏"
        }
        """
        
        let analysisResult = try await aiClient.generateText(
            systemPrompt: "–¢—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.",
            userPrompt: analysisPrompt
        )
        
        // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
        guard let jsonData = analysisResult.data(using: .utf8),
              let json = try? JSONSerialization.jsonObject(with: jsonData) as? [String: Any],
              let bestMatchTitle = json["best_match_title"] as? String,
              let relevanceScore = json["relevance_score"] as? Double else {
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–µ–π")
            return nil
        }
        
        // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç—å—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        let matchingPost = ourPosts.first { post in
            post.title.lowercased().contains(bestMatchTitle.lowercased()) ||
            bestMatchTitle.lowercased().contains(post.title.lowercased())
        }
        
        guard let post = matchingPost, relevanceScore > 0.5 else {
            return nil // –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—Ç–∞—Ç—å–∏
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ –Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ Telegraph
        let articleUrl = post.zenArticleUrl ?? post.telegraphUrl ?? "https://dzen.ru/gototravel"
        
        return MatchingArticle(
            title: post.title,
            zenArticleUrl: articleUrl,
            relevanceScore: relevanceScore
        )
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –Ω–∞—à–µ–π —Å—Ç–∞—Ç—å–∏
    private func generateSmartResponse(
        question: ZenQuestion,
        matchingArticle: MatchingArticle?
    ) async throws -> SmartResponse {
        
        let responsePrompt: String
        
        if let article = matchingArticle, let articleUrl = article.zenArticleUrl {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç–∞—Ç—å—è - —É–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—à –Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω
            responsePrompt = """
            –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ –Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω–µ.
            
            –í–û–ü–†–û–°: "\(question.question)"
            
            –£ –ù–ê–° –ï–°–¢–¨ –°–¢–ê–¢–¨–Ø –í –î–ó–ï–ù–ï: "\(article.title)"
            –°–°–´–õ–ö–ê –ù–ê –ù–ê–® –î–ó–ï–ù: \(articleUrl)
            
            –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (–°–¢–†–û–ì–û):
            [–ö—Ä–∞—Ç–∫–∏–π —Å–æ–≤–µ—Ç/–æ—Ç–≤–µ—Ç 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]. –ù–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∞—Ç—å–µ, –∫–æ—Ç–æ—Ä—É—é —è –Ω–µ–¥–∞–≤–Ω–æ —á–∏—Ç–∞–ª –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –≤ –î–∑–µ–Ω–µ. –°—Å—ã–ª–∫–∞: \(articleUrl). –ú–æ–∂–µ—Ç —Ç–µ–±–µ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ!
            
            –ü–†–ê–í–ò–õ–ê:
            - –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ = –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–≤–µ—Ç (—Å–µ—Ä–≤–∏—Å—ã, —Ü–µ–Ω—ã, —Ñ–∞–∫—Ç—ã)
            - –í—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ = –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ñ—Ä–∞–∑–∞ "–ù–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∞—Ç—å–µ..."
            - –¢—Ä–µ—Ç—å–µ = —Å—Å—ã–ª–∫–∞ –Ω–∞ –ù–ê–® –î–ó–ï–ù
            - –ù–ï —É–ø–æ–º–∏–Ω–∞—Ç—å @gdeVacationBot
            - –û–±—â–∞—è –¥–ª–∏–Ω–∞: 150-250 —Å–∏–º–≤–æ–ª–æ–≤
            - –¢–æ–Ω: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –∫–∞–∫ —Å–æ–≤–µ—Ç—É–µ—Ç –æ–ø—ã—Ç–Ω—ã–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫
            
            –ü–†–ò–ú–ï–†:
            "–Ø –∏—Å–ø–æ–ª—å–∑—É—é Aviasales –∏ Skyscanner –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω. –ù–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∞—Ç—å–µ, –∫–æ—Ç–æ—Ä—É—é —è –Ω–µ–¥–∞–≤–Ω–æ —á–∏—Ç–∞–ª –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –≤ –î–∑–µ–Ω–µ. –°—Å—ã–ª–∫–∞: https://dzen.ru/gototravel. –ú–æ–∂–µ—Ç —Ç–µ–±–µ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ!"
            
            –û—Ç–≤–µ—Ç—å –ë–ï–ó –∫–∞–≤—ã—á–µ–∫, —Å—Ä–∞–∑—É —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
            """
            
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—Ç–∞—Ç—å–∏ - –æ–±—â–∏–π –æ—Ç–≤–µ—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
            responsePrompt = """
            –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ –Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω–µ.
            
            –í–û–ü–†–û–°: "\(question.question)"
            
            –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
            [–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–≤–µ—Ç 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]. –ë–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø—Ä–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø—É–±–ª–∏–∫—É—é –Ω–∞ –∫–∞–Ω–∞–ª–µ: https://dzen.ru/gototravel
            
            –ü–†–ê–í–ò–õ–ê:
            - –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–≤–µ—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏, —Ü–∏—Ñ—Ä–∞–º–∏, —Ñ–∞–∫—Ç–∞–º–∏
            - –£–ø–æ–º—è–Ω–∏ –ù–ê–® –ö–ê–ù–ê–õ –í –î–ó–ï–ù–ï: https://dzen.ru/gototravel
            - –ù–ï —É–ø–æ–º–∏–Ω–∞—Ç—å @gdeVacationBot
            - –î–ª–∏–Ω–∞: 100-200 —Å–∏–º–≤–æ–ª–æ–≤
            - –¢–æ–Ω: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π
            
            –û—Ç–≤–µ—Ç—å –ë–ï–ó –∫–∞–≤—ã—á–µ–∫, —Å—Ä–∞–∑—É —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
            """
        }
        
        let answer = try await aiClient.generateText(
            systemPrompt: "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö.",
            userPrompt: responsePrompt
        )
        
        let relevanceScore = matchingArticle?.relevanceScore ?? 0.5
        
        return SmartResponse(
            answer: answer.trimmingCharacters(in: .whitespacesAndNewlines),
            relevanceScore: relevanceScore
        )
    }
    
    /// –ó–∞–ø–∞—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –µ—Å–ª–∏ Claude –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ—Å—Ç—ã
    private func useFallbackPosts(ourPosts: [ZenPostModel]) async throws -> [PromoSuggestion] {
        logger.info("üìã –ò—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –î–∑–µ–Ω–∞")
        
        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –î–∑–µ–Ω–∞ –≥–¥–µ –º–æ–∂–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
        let fallbackQuestions = [
            ZenQuestion(
                postUrl: "https://dzen.ru/travel",
                postTitle: "–†–∞–∑–¥–µ–ª '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è' –≤ –Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω",
                question: "–ì–¥–µ –∏—Å–∫–∞—Ç—å –¥–µ—à—ë–≤—ã–µ –±–∏–ª–µ—Ç—ã –Ω–∞ —Å–∞–º–æ–ª—ë—Ç?",
                category: "–±–∏–ª–µ—Ç—ã"
            ),
            ZenQuestion(
                postUrl: "https://dzen.ru/news/rubric/tourism",
                postTitle: "–ù–æ–≤–æ—Å—Ç–∏ —Ç—É—Ä–∏–∑–º–∞",
                question: "–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –±—Ä–∞—Ç—å —Å —Å–æ–±–æ–π –≤ –æ—Ç–ø—É—Å–∫?",
                category: "–±—é–¥–∂–µ—Ç"
            ),
            ZenQuestion(
                postUrl: "https://dzen.ru/id/tourism-tips",
                postTitle: "–°–æ–≤–µ—Ç—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º",
                question: "–ö—É–¥–∞ –º–æ–∂–Ω–æ –ø–æ–µ—Ö–∞—Ç—å –±–µ–∑ –≤–∏–∑—ã –∏–∑ –†–æ—Å—Å–∏–∏?",
                category: "–≤–∏–∑–∞"
            )
        ]
        
        var suggestions: [PromoSuggestion] = []
        
        for question in fallbackQuestions {
            let matchingArticle = try await findBestMatchingArticle(
                question: question,
                ourPosts: ourPosts
            )
            
            let response = try await generateSmartResponse(
                question: question,
                matchingArticle: matchingArticle
            )
            
            suggestions.append(
                PromoSuggestion(
                    postUrl: question.postUrl,
                    postTitle: question.postTitle,
                    question: question.question,
                    suggestedResponse: response.answer,
                    ourArticleUrl: matchingArticle?.zenArticleUrl,
                    ourArticleTitle: matchingArticle?.title,
                    relevanceScore: response.relevanceScore
                )
            )
            
            try await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫—É–Ω–¥—ã
        }
        
        return suggestions
    }
}

// MARK: - –ú–æ–¥–µ–ª–∏

struct ZenQuestion {
    let postUrl: String
    let postTitle: String
    let question: String
    let category: String
}

struct MatchingArticle {
    let title: String
    let zenArticleUrl: String?
    let relevanceScore: Double
}

struct SmartResponse {
    let answer: String
    let relevanceScore: Double
}

struct PromoSuggestion {
    let postUrl: String
    let postTitle: String
    let question: String
    let suggestedResponse: String
    let ourArticleUrl: String?
    let ourArticleTitle: String?
    let relevanceScore: Double
}
