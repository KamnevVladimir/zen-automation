import Vapor
import Fluent
import Queues

struct DailyPostJob: AsyncScheduledJob {
    let contentGenerator: ContentGeneratorServiceProtocol
    let publisher: ZenPublisherProtocol
    let notifier: TelegramNotifierProtocol
    
    func run(context: QueueContext) async throws {
        let logger = context.logger
        logger.info("üïê –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        guard let schedule = ScheduleConfig.getCurrentSchedule() else {
            logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
            return
        }
        
        logger.info("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç —Ç–∏–ø–∞: \(schedule.templateType.rawValue)")
        
        do {
            // 1. –°–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            let request = GenerationRequest(
                templateType: schedule.templateType,
                topic: schedule.topic,
                destinations: selectDestinations(for: schedule.templateType),
                priceData: nil,
                trendData: nil
            )
            
            // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
            let response = try await contentGenerator.generatePost(
                request: request,
                db: context.application.db
            )
            
            logger.info("‚úÖ –ü–æ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: \(response.postId)")
            
            // 3. –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            guard let post = try await ZenPostModel.find(response.postId, on: context.application.db) else {
                throw Abort(.notFound, reason: "Post not found")
            }
            
            let publishResult = try await publisher.publish(post: post, db: context.application.db)
            
            if publishResult.success {
                logger.info("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: \(publishResult.zenArticleId ?? "N/A")")
            } else {
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: \(publishResult.errorMessage ?? "Unknown")")
            }
            
        } catch {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: \(error)")
            try? await notifier.sendError(error: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: \(error.localizedDescription)")
        }
    }
    
    private func selectDestinations(for type: PostCategory) -> [String] {
        let allDestinations = [
            "–¢—É—Ä—Ü–∏—è", "–ï–≥–∏–ø–µ—Ç", "–û–ê–≠", "–¢–∞–∏–ª–∞–Ω–¥", "–í—å–µ—Ç–Ω–∞–º",
            "–ì—Ä—É–∑–∏—è", "–ê—Ä–º–µ–Ω–∏—è", "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
            "–ò–Ω–¥–∏—è", "–®—Ä–∏-–õ–∞–Ω–∫–∞", "–ú–∞–ª—å–¥–∏–≤—ã", "–ë–∞–ª–∏", "–ö–∏—Ç–∞–π"
        ]
        
        switch type {
        case .comparison:
            return Array(allDestinations.shuffled().prefix(2))
        case .budget, .trending:
            return Array(allDestinations.shuffled().prefix(5))
        default:
            return Array(allDestinations.shuffled().prefix(1))
        }
    }
}

