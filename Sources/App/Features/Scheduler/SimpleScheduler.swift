import Vapor
import Foundation
import Dispatch

/// –ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç Queues
final class SimpleScheduler {
    private let app: Application
    private var timers: [DispatchSourceTimer] = []
    
    init(app: Application) {
        self.app = app
    }
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    func startPostSchedule() {
        let schedules = ScheduleConfig.defaultSchedules
        
        for schedule in schedules {
            scheduleDaily(at: schedule.hour, minute: schedule.minute) { [weak self] in
                guard let self = self else { return }
                
                Task {
                    await self.generateAndPublishPost(
                        templateType: schedule.templateType,
                        topic: schedule.topic
                    )
                }
            }
            
            app.logger.info("üìÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: \(schedule.timeString) - \(schedule.templateType.rawValue)")
        }
    }
    
    /// –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    private func scheduleDaily(at hour: Int, minute: Int, action: @escaping () -> Void) {
        let timer = DispatchSource.makeTimerSource(queue: DispatchQueue.global())
        
        // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        let nextRun = calculateNextRun(hour: hour, minute: minute)
        let interval = nextRun.timeIntervalSinceNow
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        timer.schedule(
            deadline: .now() + interval,
            repeating: .seconds(86400) // 24 —á–∞—Å–∞
        )
        
        timer.setEventHandler {
            action()
        }
        
        timer.resume()
        timers.append(timer)
        
        app.logger.info("‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –≤ \(String(format: "%02d:%02d", hour, minute)) —á–µ—Ä–µ–∑ \(Int(interval/60)) –º–∏–Ω—É—Ç")
    }
    
    /// –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    private func calculateNextRun(hour: Int, minute: Int) -> Date {
        let calendar = Calendar.current
        let now = Date()
        
        var components = calendar.dateComponents([.year, .month, .day], from: now)
        components.hour = hour
        components.minute = minute
        components.second = 0
        
        guard let scheduledTime = calendar.date(from: components) else {
            return now.addingTimeInterval(3600) // –ó–∞–ø–∞—Å –Ω–∞ —á–∞—Å
        }
        
        // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –±–µ—Ä—ë–º –∑–∞–≤—Ç—Ä–∞
        if scheduledTime <= now {
            return calendar.date(byAdding: .day, value: 1, to: scheduledTime) ?? scheduledTime
        }
        
        return scheduledTime
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç
    private func generateAndPublishPost(templateType: PostCategory, topic: String) async {
        app.logger.info("üïê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞: \(topic)")
        
        do {
            // –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å—ã
            let aiClient = AnthropicClient(client: app.client, logger: app.logger)
            let validator = ContentValidator()
            let contentGenerator = ContentGeneratorService(
                aiClient: aiClient,
                validator: validator,
                logger: app.logger
            )
            let notifier = TelegramNotifier(client: app.client, logger: app.logger)
            
            // –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º TelegramChannelPublisher –¥–ª—è –†–ï–ê–õ–¨–ù–û–ô –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª
            let publisher = TelegramChannelPublisher(
                client: app.client,
                logger: app.logger,
                contentGenerator: contentGenerator
            )
            
            // –°–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å
            let request = GenerationRequest(
                templateType: templateType,
                topic: topic,
                destinations: selectDestinations(for: templateType),
                priceData: nil,
                trendData: nil
            )
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
            let response = try await contentGenerator.generatePost(
                request: request,
                db: app.db
            )
            
            app.logger.info("‚úÖ –ü–æ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: \(response.postId)")
            
            // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            guard let post = try await ZenPostModel.find(response.postId, on: app.db) else {
                throw Abort(.notFound, reason: "Post not found")
            }
            
            let publishResult = try await publisher.publish(post: post, db: app.db)
            
            if publishResult.success {
                app.logger.info("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram –∫–∞–Ω–∞–ª: \(publishResult.publishedURL ?? "N/A")")
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± —É—Å–ø–µ—Ö–µ
                try? await notifier.sendNotification(
                    message: """
                    ‚úÖ <b>–ê–≤—Ç–æ–ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!</b>
                    
                    üìù <b>\(response.title)</b>
                    
                    üìä <b>–î–µ—Ç–∞–ª–∏:</b>
                    ‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç: \(response.shortPost.count) —Å–∏–º–≤–æ–ª–æ–≤
                    ‚Ä¢ –ü–æ–ª–Ω—ã–π –ø–æ—Å—Ç: \(response.fullPost.count) —Å–∏–º–≤–æ–ª–æ–≤
                    ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: \(response.imageURLs.count)
                    
                    üîó <b>–ö–∞–Ω–∞–ª:</b> \(AppConfig.telegramChannelId)
                    üìñ <b>Telegraph:</b> –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    
                    üïê \(Date())
                    """
                )
            } else {
                app.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: \(publishResult.errorMessage ?? "Unknown")")
                try? await notifier.sendError(error: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏: \(publishResult.errorMessage ?? "Unknown")")
            }
            
        } catch {
            app.logger.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: \(error)")
            
            let notifier = TelegramNotifier(client: app.client, logger: app.logger)
            try? await notifier.sendError(error: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏: \(error.localizedDescription)")
        }
    }
    
    /// –í—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞
    private func selectDestinations(for type: PostCategory) -> [String] {
        let allDestinations = [
            "–¢—É—Ä—Ü–∏—è", "–ï–≥–∏–ø–µ—Ç", "–û–ê–≠", "–¢–∞–∏–ª–∞–Ω–¥", "–í—å–µ—Ç–Ω–∞–º",
            "–ì—Ä—É–∑–∏—è", "–ê—Ä–º–µ–Ω–∏—è", "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
            "–ò–Ω–¥–∏—è", "–®—Ä–∏-–õ–∞–Ω–∫–∞", "–ú–∞–ª—å–¥–∏–≤—ã", "–ë–∞–ª–∏", "–ö–∏—Ç–∞–π"
        ]
        
        switch type {
        case .comparison:
            return Array(allDestinations.shuffled().prefix(2))
        case .budget, .trending:
            return Array(allDestinations.shuffled().prefix(5))
        default:
            return Array(allDestinations.shuffled().prefix(1))
        }
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
    func stop() {
        timers.forEach { $0.cancel() }
        timers.removeAll()
        app.logger.info("‚èπ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }
}
