import Foundation
import Vapor
import Fluent

/// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–º —Å —É—á—ë—Ç–æ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
final class DynamicTopicGenerator {
    private let db: Database
    private let logger: Logger
    private let uniquenessChecker: UniquenessChecker
    
    init(db: Database, logger: Logger) {
        self.db = db
        self.logger = logger
        self.uniquenessChecker = UniquenessChecker(db: db, logger: logger)
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ç–µ–º—É –¥–ª—è –ø–æ—Å—Ç–∞ —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    func generateUniqueTopic(
        for category: PostCategory,
        maxAttempts: Int = 5
    ) async throws -> String {
        
        logger.info("üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ç–µ–º—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: \(category.rawValue)")
        
        for attempt in 1...maxAttempts {
            logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ \(attempt)/\(maxAttempts)")
            
            // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ç–µ–º—É
            let baseTopic = generateBaseTopic(for: category)
            
            // 2. –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            let enhancedTopic = enhanceWithCurrentTrends(baseTopic, category: category)
            
            // 3. –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            let seasonalTopic = addSeasonalElements(enhancedTopic, category: category)
            
            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            let uniquenessResult = try await uniquenessChecker.checkUniqueness(
                title: seasonalTopic,
                content: "", // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
                category: category,
                topic: seasonalTopic
            )
            
            if uniquenessResult.isUnique {
                logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ç–µ–º–∞: \(seasonalTopic)")
                return seasonalTopic
            } else {
                logger.warning("‚ö†Ô∏è –¢–µ–º–∞ –Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω–∞ (score: \(String(format: "%.1f%%", uniquenessResult.score * 100)))")
                logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: \(uniquenessResult.recommendations.joined(separator: ", "))")
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ç–µ–º—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ç–µ–º—É –∑–∞ \(maxAttempts) –ø–æ–ø—ã—Ç–æ–∫")
        return generateBaseTopic(for: category)
    }
    
    // MARK: - Private Methods
    
    private func generateBaseTopic(for category: PostCategory) -> String {
        switch category {
        case .lifehack:
            return generateLifehackTopic()
        case .comparison:
            return generateComparisonTopic()
        case .budget:
            return generateBudgetTopic()
        case .trending:
            return generateTrendingTopic()
        case .destination:
            return generateDestinationTopic()
        case .season:
            return generateSeasonalTopic()
        case .weekend:
            return generateWeekendTopic()
        case .mistake:
            return generateMistakeTopic()
        case .hiddenGem:
            return generateHiddenGemTopic()
        case .visaFree:
            return generateVisaFreeTopic()
        }
    }
    
    private func generateLifehackTopic() -> String {
        let baseTopics = [
            "–∫–∞–∫ –Ω–∞–π—Ç–∏ –¥–µ—à—ë–≤—ã–µ –±–∏–ª–µ—Ç—ã",
            "–∫–∞–∫ —É–ø–∞–∫–æ–≤–∞—Ç—å —á–µ–º–æ–¥–∞–Ω",
            "–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –æ—Ç–µ–ª—å",
            "–∫–∞–∫ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ –µ–¥–µ",
            "–∫–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å —Ç–æ–ª–ø —Ç—É—Ä–∏—Å—Ç–æ–≤",
            "–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–ø–≥—Ä–µ–π–¥",
            "–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞—Ä—à–µ—Ä–∏–Ω–≥–æ–º –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π",
            "–∫–∞–∫ –Ω–∞–π—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏",
            "–∫–∞–∫ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–π—Ç–∏ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å",
            "–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –≤ —Å–∞–º–æ–ª—ë—Ç–µ"
        ]
        
        let angles = [
            "—Å–µ–∫—Ä–µ—Ç –∫–æ—Ç–æ—Ä—ã–π —ç–∫–æ–Ω–æ–º–∏—Ç",
            "–æ—à–∏–±–∫–∞ –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ–∏—Ç –¥–µ–Ω–µ–≥",
            "–ª–∞–π—Ñ—Ö–∞–∫ –æ—Ç —Å—Ç—é–∞—Ä–¥–µ—Å—Å—ã",
            "—Ç—Ä—é–∫ –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞—é—Ç —Ç–æ–ª—å–∫–æ",
            "—Å–ø–æ—Å–æ–± –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç",
            "—Ö–∏—Ç—Ä–æ—Å—Ç—å –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏",
            "–ø—Ä–∏—ë–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ",
            "–º–µ—Ç–æ–¥ –¥–ª—è –¥–µ—à—ë–≤–æ–≥–æ"
        ]
        
        let baseTopic = baseTopics.randomElement() ?? "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
        let angle = angles.randomElement() ?? "—Å–ø–æ—Å–æ–±"
        
        return "\(angle) \(baseTopic)"
    }
    
    private func generateComparisonTopic() -> String {
        let destinations = [
            "–¢—É—Ä—Ü–∏—è vs –ï–≥–∏–ø–µ—Ç", "–î—É–±–∞–π vs –û–º–∞–Ω", "–¢–∞–∏–ª–∞–Ω–¥ vs –í—å–µ—Ç–Ω–∞–º",
            "–ì—Ä—É–∑–∏—è vs –ê—Ä–º–µ–Ω–∏—è", "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è vs –ò—Å–ø–∞–Ω–∏—è", "–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è vs –ê–ª–±–∞–Ω–∏—è",
            "–ú–∞–ª—å–¥–∏–≤—ã vs –°–µ–π—à–µ–ª—ã", "–ë–∞–ª–∏ vs –§–∏–ª–∏–ø–ø–∏–Ω—ã", "–ö–∏–ø—Ä vs –ì—Ä–µ—Ü–∏—è"
        ]
        
        let aspects = [
            "–≥–¥–µ –¥–µ—à–µ–≤–ª–µ –æ—Ç–¥—ã—Ö", "—á—Ç–æ –ª—É—á—à–µ –¥–ª—è —Å–µ–º—å–∏", "–∫—É–¥–∞ –µ—Ö–∞—Ç—å –∑–∏–º–æ–π",
            "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –∏ —Å–µ—Ä–≤–∏—Å–∞", "–ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã", "—á—Ç–æ –≤—ã–±—Ä–∞—Ç—å –≤ 2025"
        ]
        
        let destination = destinations.randomElement() ?? "–¥–≤–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        let aspect = aspects.randomElement() ?? "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"
        
        return "\(destination): \(aspect)"
    }
    
    private func generateBudgetTopic() -> String {
        let destinations = [
            "–¢—É—Ä—Ü–∏—è", "–ï–≥–∏–ø–µ—Ç", "–û–ê–≠", "–¢–∞–∏–ª–∞–Ω–¥", "–í—å–µ—Ç–Ω–∞–º", "–ì—Ä—É–∑–∏—è",
            "–ê—Ä–º–µ–Ω–∏—è", "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω"
        ]
        
        let budgetRanges = [
            "–∑–∞ 30000‚ÇΩ", "–∑–∞ 50000‚ÇΩ", "–∑–∞ 100000‚ÇΩ", "–¥–æ 40000‚ÇΩ",
            "–±—é–¥–∂–µ—Ç–Ω–æ", "–Ω–µ–¥–æ—Ä–æ–≥–æ", "—ç–∫–æ–Ω–æ–º–Ω–æ", "–¥–µ—à—ë–≤–æ"
        ]
        
        let destination = destinations.randomElement() ?? "–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
        let budget = budgetRanges.randomElement() ?? "–±—é–¥–∂–µ—Ç–Ω–æ"
        
        return "–û—Ç–¥—ã—Ö –≤ \(destination) \(budget): –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á—ë—Ç –±—é–¥–∂–µ—Ç–∞"
    }
    
    private func generateTrendingTopic() -> String {
        let _ = Calendar.current.component(.year, from: Date())
        
        let trendingAspects = [
            "–∫—É–¥–∞ –ø–æ–µ—Ö–∞—Ç—å –≤ 2025",
            "–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è 2025",
            "—Ç—Ä–µ–Ω–¥—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π 2025",
            "—Ö–∏—Ç—ã —Å–µ–∑–æ–Ω–∞ 2025",
            "–º–æ–¥–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è 2025",
            "–∫—É–¥–∞ –ª–µ—Ç—è—Ç –≤—Å–µ –≤ 2025"
        ]
        
        return trendingAspects.randomElement() ?? "—Ç—Ä–µ–Ω–¥—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"
    }
    
    private func generateDestinationTopic() -> String {
        let destinations = [
            "–¢—É—Ä—Ü–∏—è", "–ï–≥–∏–ø–µ—Ç", "–û–ê–≠", "–¢–∞–∏–ª–∞–Ω–¥", "–í—å–µ—Ç–Ω–∞–º", "–ì—Ä—É–∑–∏—è",
            "–ê—Ä–º–µ–Ω–∏—è", "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω",
            "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è", "–ò—Å–ø–∞–Ω–∏—è", "–ò—Ç–∞–ª–∏—è", "–ö–∏–ø—Ä", "–ì—Ä–µ—Ü–∏—è"
        ]
        
        let aspects = [
            "–ø–æ–ª–Ω—ã–π –≥–∞–π–¥", "—á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å", "–≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è",
            "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç", "–ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã", "–ª–∏—á–Ω—ã–π –æ–ø—ã—Ç",
            "—Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞", "–æ—à–∏–±–∫–∏ —Ç—É—Ä–∏—Å—Ç–æ–≤", "–ª–∞–π—Ñ—Ö–∞–∫–∏"
        ]
        
        let destination = destinations.randomElement() ?? "–ø–æ–ø—É–ª—è—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞"
        let aspect = aspects.randomElement() ?? "–æ–±–∑–æ—Ä"
        
        return "\(destination): \(aspect)"
    }
    
    private func generateSeasonalTopic() -> String {
        let currentMonth = Calendar.current.component(.month, from: Date())
        
        let seasonalTopics: [String]
        switch currentMonth {
        case 12, 1, 2:
            seasonalTopics = [
                "–∫—É–¥–∞ –ø–æ–µ—Ö–∞—Ç—å –∑–∏–º–æ–π", "–∑–∏–º–Ω–∏–π –æ—Ç–¥—ã—Ö –Ω–∞ –º–æ—Ä–µ",
                "–≥–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–µ –∫—É—Ä–æ—Ä—Ç—ã", "–≥–¥–µ —Ç–µ–ø–ª–æ –∑–∏–º–æ–π",
                "–Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã", "–∑–∏–º–æ–≤–∫–∞ –≤ —Ç—ë–ø–ª—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö"
            ]
        case 3, 4, 5:
            seasonalTopics = [
                "–∫—É–¥–∞ –ø–æ–µ—Ö–∞—Ç—å –≤–µ—Å–Ω–æ–π", "–≤–µ—Å–µ–Ω–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                "–º–∞–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏", "–±–∞—Ä—Ö–∞—Ç–Ω—ã–π —Å–µ–∑–æ–Ω",
                "–≥–¥–µ —Ü–≤–µ—Ç—ë—Ç —Å–∞–∫—É—Ä–∞", "–≤–µ—Å–µ–Ω–Ω–∏–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª–∏"
            ]
        case 6, 7, 8:
            seasonalTopics = [
                "–∫—É–¥–∞ –ø–æ–µ—Ö–∞—Ç—å –ª–µ—Ç–æ–º", "–ª–µ—Ç–Ω–∏–π –æ—Ç–¥—ã—Ö –Ω–∞ –º–æ—Ä–µ",
                "–ø–ª—è–∂–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–ª–µ—Ç–Ω–∏–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª–∏",
                "–≥–¥–µ –Ω–µ –∂–∞—Ä–∫–æ –ª–µ—Ç–æ–º", "–≥–æ—Ä–Ω—ã–π –æ—Ç–¥—ã—Ö –ª–µ—Ç–æ–º"
            ]
        case 9, 10, 11:
            seasonalTopics = [
                "–∫—É–¥–∞ –ø–æ–µ—Ö–∞—Ç—å –æ—Å–µ–Ω—å—é", "–æ—Å–µ–Ω–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                "–±–∞—Ä—Ö–∞—Ç–Ω—ã–π —Å–µ–∑–æ–Ω", "–æ—Å–µ–Ω–Ω–∏–µ –∫—Ä–∞—Å–∫–∏",
                "–≥–¥–µ —Ç–µ–ø–ª–æ –æ—Å–µ–Ω—å—é", "–æ—Å–µ–Ω–Ω–∏–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª–∏"
            ]
        default:
            seasonalTopics = ["—Å–µ–∑–æ–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]
        }
        
        return seasonalTopics.randomElement() ?? "—Å–µ–∑–æ–Ω–Ω—ã–π –æ—Ç–¥—ã—Ö"
    }
    
    private func generateWeekendTopic() -> String {
        let weekendDestinations = [
            "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "–ö–∞–∑–∞–Ω—å", "–°–æ—á–∏",
            "–ö—Ä—ã–º", "–ê–ª—Ç–∞–π", "–ö–∞—Ä–µ–ª–∏—è", "–ó–æ–ª–æ—Ç–æ–µ –∫–æ–ª—å—Ü–æ"
        ]
        
        let aspects = [
            "–≤—ã—Ö–æ–¥–Ω—ã–µ –≤", "–∫—É–¥–∞ —Å—ä–µ–∑–¥–∏—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ",
            "–∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–µ–∑–¥–∫–∞ –≤", "2 –¥–Ω—è –≤",
            "—á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –≤"
        ]
        
        let destination = weekendDestinations.randomElement() ?? "–±–ª–∏–∑–∫–∏–π –≥–æ—Ä–æ–¥"
        let aspect = aspects.randomElement() ?? "–≤—ã—Ö–æ–¥–Ω—ã–µ"
        
        return "\(aspect) \(destination)"
    }
    
    private func generateMistakeTopic() -> String {
        let mistakeTypes = [
            "–æ—à–∏–±–∫–∏ —Ç—É—Ä–∏—Å—Ç–æ–≤", "—á—Ç–æ –Ω–µ —Å—Ç–æ–∏—Ç –¥–µ–ª–∞—Ç—å",
            "–≥–ª–∞–≤–Ω—ã–µ –æ—à–∏–±–∫–∏", "—Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–º–∞—Ö–∏",
            "–æ—à–∏–±–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ—è—Ç –¥–µ–Ω–µ–≥", "—á—Ç–æ –ø–æ—Ä—Ç–∏—Ç –æ—Ç–ø—É—Å–∫"
        ]
        
        let contexts = [
            "–ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏", "–≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç—É", "–≤ –æ—Ç–µ–ª–µ",
            "–ø—Ä–∏ –æ–±–º–µ–Ω–µ –≤–∞–ª—é—Ç—ã", "–ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç–∫—Å–∫—É—Ä—Å–∏–π",
            "–ø—Ä–∏ —É–ø–∞–∫–æ–≤–∫–µ —á–µ–º–æ–¥–∞–Ω–∞", "–ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞"
        ]
        
        let mistakeType = mistakeTypes.randomElement() ?? "–æ—à–∏–±–∫–∏"
        let context = contexts.randomElement() ?? "–≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏"
        
        return "\(mistakeType) \(context)"
    }
    
    private func generateHiddenGemTopic() -> String {
        let hiddenGems = [
            "—Å–∫—Ä—ã—Ç—ã–µ –∂–µ–º—á—É–∂–∏–Ω—ã", "–º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–µ—Å—Ç–∞",
            "—Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏", "–Ω–µ–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            "—Å–∫—Ä—ã—Ç—ã–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞", "—Ç–∞–π–Ω—ã–µ —É–≥–æ–ª–∫–∏"
        ]
        
        let regions = [
            "–ï–≤—Ä–æ–ø—ã", "–ê–∑–∏–∏", "–†–æ—Å—Å–∏–∏", "–°–ù–ì", "–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—å—è",
            "–ë–∞–ª–∫–∞–Ω", "–ö–∞–≤–∫–∞–∑–∞", "–°—Ä–µ–¥–Ω–µ–π –ê–∑–∏–∏"
        ]
        
        let gem = hiddenGems.randomElement() ?? "—Å–∫—Ä—ã—Ç—ã–µ –º–µ—Å—Ç–∞"
        let region = regions.randomElement() ?? "–º–∏—Ä–∞"
        
        return "\(gem) \(region)"
    }
    
    private func generateVisaFreeTopic() -> String {
        let _ = Calendar.current.component(.year, from: Date())
        
        let visaFreeAspects = [
            "–±–µ–∑–≤–∏–∑–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω—ã 2025",
            "–∫—É–¥–∞ –ø–æ–µ—Ö–∞—Ç—å –±–µ–∑ –≤–∏–∑—ã",
            "—Å—Ç—Ä–∞–Ω—ã –±–µ–∑ –≤–∏–∑—ã –¥–ª—è —Ä–æ—Å—Å–∏—è–Ω",
            "–±–µ–∑–≤–∏–∑–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è 2025",
            "–∫—É–¥–∞ –ª–µ—Ç–µ—Ç—å –±–µ–∑ –≤–∏–∑—ã"
        ]
        
        return visaFreeAspects.randomElement() ?? "–±–µ–∑–≤–∏–∑–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω—ã"
    }
    
    private func enhanceWithCurrentTrends(_ topic: String, category: PostCategory) -> String {
        let _ = Calendar.current.component(.year, from: Date())
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã 2025
        let trends = [
            "2025", "–Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞", "–∞–∫—Ç—É–∞–ª—å–Ω–æ", "—Å–µ–π—á–∞—Å",
            "–≤ —ç—Ç–æ–º –≥–æ–¥—É", "–æ–±–Ω–æ–≤–ª–µ–Ω–æ", "—Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ"
        ]
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ —Ç–æ–ª—å–∫–æ –≤ 30% —Å–ª—É—á–∞–µ–≤, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å
        if Int.random(in: 1...10) <= 3 {
            let trend = trends.randomElement() ?? "2025"
            return "\(topic) \(trend)"
        }
        
        return topic
    }
    
    private func addSeasonalElements(_ topic: String, category: PostCategory) -> String {
        let currentMonth = Calendar.current.component(.month, from: Date())
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        guard [.season, .destination, .budget, .trending].contains(category) else {
            return topic
        }
        
        let seasonalElements: [String]
        switch currentMonth {
        case 12, 1, 2:
            seasonalElements = ["–∑–∏–º–æ–π", "–≤ —Ö–æ–ª–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", "–¥–ª—è –∑–∏–º–æ–≤–∫–∏"]
        case 3, 4, 5:
            seasonalElements = ["–≤–µ—Å–Ω–æ–π", "–≤ –º–µ–∂—Å–µ–∑–æ–Ω—å–µ", "–¥–ª—è –º–∞–π—Å–∫–∏—Ö"]
        case 6, 7, 8:
            seasonalElements = ["–ª–µ—Ç–æ–º", "–≤ —Å–µ–∑–æ–Ω", "–¥–ª—è –æ—Ç–ø—É—Å–∫–∞"]
        case 9, 10, 11:
            seasonalElements = ["–æ—Å–µ–Ω—å—é", "–≤ –±–∞—Ä—Ö–∞—Ç–Ω—ã–π —Å–µ–∑–æ–Ω", "–¥–ª—è –æ—Å–µ–Ω–Ω–∏—Ö –∫–∞–Ω–∏–∫—É–ª"]
        default:
            seasonalElements = []
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ 40% —Å–ª—É—á–∞–µ–≤
        if Int.random(in: 1...10) <= 4, let element = seasonalElements.randomElement() {
            return "\(topic) \(element)"
        }
        
        return topic
    }
}
