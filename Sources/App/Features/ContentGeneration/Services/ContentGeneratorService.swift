import Vapor
import Fluent

protocol ContentGeneratorServiceProtocol {
    func generatePost(request: GenerationRequest, db: Database) async throws -> GenerationResponse
    func regenerateShortPost(
        fullPost: String,
        currentShortPost: String,
        targetLength: Int
    ) async throws -> String
}

final class ContentGeneratorService: ContentGeneratorServiceProtocol {
    private let aiClient: AIClientProtocol
    private let validator: ContentValidatorProtocol
    private let viralOptimizer: ViralContentOptimizer
    private let logger: Logger
    
    init(
        aiClient: AIClientProtocol,
        validator: ContentValidatorProtocol,
        logger: Logger
    ) {
        self.aiClient = aiClient
        self.validator = validator
        self.viralOptimizer = ViralContentOptimizer()
        self.logger = logger
    }
    
    func generatePost(request: GenerationRequest, db: Database) async throws -> GenerationResponse {
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–∞: \(request.templateType.rawValue)")
        
        let startTime = Date()
        
        // 1. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        let existingTitles = try await ZenPostModel.query(on: db)
            .all()
            .map { $0.title.lowercased() }
        
        logger.info("üìö –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤: \(existingTitles.count)")
        
        // 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        let textContent = try await generateText(for: request, existingTitles: existingTitles)
        logger.info("‚úÖ –¢–µ–∫—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        
        // 2. –ü–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude (—É–±–∏—Ä–∞–µ–º markdown code fence –µ—Å–ª–∏ –µ—Å—Ç—å)
        var cleanedContent = textContent.trimmingCharacters(in: .whitespacesAndNewlines)
        
        // –£–±–∏—Ä–∞–µ–º ```json ... ``` –µ—Å–ª–∏ Claude –æ–±–µ—Ä–Ω—É–ª –≤ markdown
        if cleanedContent.hasPrefix("```json") {
            cleanedContent = cleanedContent.replacingOccurrences(of: "```json", with: "")
            cleanedContent = cleanedContent.replacingOccurrences(of: "```", with: "")
            cleanedContent = cleanedContent.trimmingCharacters(in: .whitespacesAndNewlines)
        } else if cleanedContent.hasPrefix("```") {
            cleanedContent = cleanedContent.replacingOccurrences(of: "```", with: "")
            cleanedContent = cleanedContent.trimmingCharacters(in: .whitespacesAndNewlines)
        }
        
        guard let contentData = cleanedContent.data(using: .utf8),
              let json = try? JSONSerialization.jsonObject(with: contentData) as? [String: Any] else {
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON. –û—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: \(cleanedContent.prefix(500))")
            throw Abort(.internalServerError, reason: "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç Claude")
        }
        
        logger.info("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
        
        let title = json["title"] as? String ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        let subtitle = json["subtitle"] as? String
        let body = json["body"] as? String ?? "" // –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        let metaDescription = json["meta_description"] as? String
        let imagePromptsEnglish = json["image_prompts_english"] as? [String] ?? []
        let estimatedReadTime = json["estimated_read_time"] as? Int ?? 5
        
        // –ü–∞—Ä—Å–∏–º –¥–≤–∞ –ø–æ—Å—Ç–∞ –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        var shortPost = json["short_post"] as? String ?? body
        let fullPost = json["full_post"] as? String ?? body
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–ª–∏–Ω—É short_post —Å —É—á—ë—Ç–æ–º —Å—Å—ã–ª–æ–∫
        let botLinkLength = "ü§ñ [@gdeVacationBot](https://t.me/gdeVacationBot) - –ø–æ–∏—Å–∫ –¥–µ—à—ë–≤—ã—Ö –±–∏–ª–µ—Ç–æ–≤".count
        let telegraphLinkLength = "üìñ [–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç—å—é —Å –¥–µ—Ç–∞–ª—è–º–∏](https://telegra.ph/example)".count
        let maxShortPostLength = 1024 - botLinkLength - telegraphLinkLength - 10 // 10 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
        
        if shortPost.count > maxShortPostLength {
            logger.warning("‚ö†Ô∏è short_post —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: \(shortPost.count) > \(maxShortPostLength) —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info("üîÑ –ü—Ä–æ—Å–∏–º Claude —Å–æ–∫—Ä–∞—Ç–∏—Ç—å short_post...")
            
            // –ü—Ä–æ—Å–∏–º Claude —Å–æ–∫—Ä–∞—Ç–∏—Ç—å short_post
            shortPost = try await requestShorterPost(
                originalShortPost: shortPost,
                maxLength: maxShortPostLength,
                title: title
            )
            
            logger.info("‚úÖ short_post —Å–æ–∫—Ä–∞—â—ë–Ω –¥–æ \(shortPost.count) —Å–∏–º–≤–æ–ª–æ–≤")
        }
        
        logger.info("üì∏ –ü–æ–ª—É—á–µ–Ω—ã –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: \(imagePromptsEnglish.count) —à—Ç")
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∑–∞–≥–æ–ª–æ–≤–∫–∞
        let viralScore = viralOptimizer.analyzeTitle(title)
        logger.info("üìä –í–∏—Ä—É—Å–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞: \(String(format: "%.1f%%", viralScore.overall * 100))")
        
        if !viralScore.recommendations.isEmpty {
            logger.warning("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
            viralScore.recommendations.forEach { logger.warning("  - \($0)") }
        }
        
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è –î–∑–µ–Ω–∞
        let optimizedTags = viralOptimizer.optimizeTags(
            for: request.topic ?? title,
            category: request.templateType
        )
        
        // 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –í–ê–ñ–ù–û: –≤–∞–ª–∏–¥–∏—Ä—É–µ–º fullPost, –∞ –Ω–µ —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ body!
        let validationResult = validator.validate(body: fullPost, tags: optimizedTags)
        if !validationResult.isValid {
            logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: \(validationResult.issues.joined(separator: ", "))")
            throw Abort(.badRequest, reason: "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        }
        logger.info("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∞–ª–∏–¥–µ–Ω (score: \(validationResult.score))")
        
        // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –æ—Ç Claude –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)
        logger.info("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ–º–ø—Ç–∞–º –æ—Ç Claude (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)")
        let imageURLs = try await generateImages(prompts: imagePromptsEnglish)
        logger.info("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: \(imageURLs.count) —à—Ç")
        
        // 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
        let post = ZenPostModel(
            title: title,
            subtitle: subtitle,
            body: body,
            shortPost: shortPost,
            fullPost: fullPost,
            tags: optimizedTags, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
            metaDescription: metaDescription,
            templateType: request.templateType.rawValue,
            status: .draft
        )
        
        try await post.save(on: db)
        
        // 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        for (index, imageURL) in imageURLs.enumerated() {
            let image = ZenImageModel(
                postId: post.id!,
                url: imageURL,
                prompt: imagePromptsEnglish[safe: index] ?? "",
                position: index
            )
            try await image.save(on: db)
        }
        
        // 7. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        let duration = Date().timeIntervalSince(startTime)
        logger.info("‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –∑–∞ \(String(format: "%.2f", duration))—Å")
        
        let log = GenerationLogModel(
            postId: post.id!,
            step: "generation",
            status: "success",
            durationMs: Int(duration * 1000),
            costUsd: estimateCost(textTokens: 9000, images: imageURLs.count)
        )
        try await log.save(on: db)
        
        return GenerationResponse(
            postId: post.id!,
            title: title,
            subtitle: subtitle,
            shortPost: shortPost,
            fullPost: fullPost,
            tags: optimizedTags, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
            metaDescription: metaDescription,
            imageURLs: imageURLs,
            estimatedReadTime: estimatedReadTime,
            status: "draft"
        )
    }
    
    /// –ü—Ä–æ—Å–∏—Ç Claude —Å–æ–∫—Ä–∞—Ç–∏—Ç—å short_post –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
    private func requestShorterPost(
        originalShortPost: String,
        maxLength: Int,
        title: String
    ) async throws -> String {
        let shorterPrompt = """
        –°–æ–∫—Ä–∞—Ç–∏ —ç—Ç–æ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –¥–ª—è Telegram –¥–æ \(maxLength) —Å–∏–º–≤–æ–ª–æ–≤ –º–∞–∫—Å–∏–º—É–º.
        –°–æ—Ö—Ä–∞–Ω–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—Ç—å –∏ –∫—Ä—é—á–æ–∫, –Ω–æ —É–±–µ—Ä–∏ –ª–∏—à–Ω–∏–µ –¥–µ—Ç–∞–ª–∏.
        
        –ó–∞–≥–æ–ª–æ–≤–æ–∫: \(title)
        
        –¢–µ–∫—É—â–∏–π –ø–æ—Å—Ç (\(originalShortPost.count) —Å–∏–º–≤–æ–ª–æ–≤):
        \(originalShortPost)
        
        –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
        """
        
        let response = try await aiClient.generateText(
            systemPrompt: "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–æ–≤. –°–æ–∫—Ä–∞—â–∞–π —á—ë—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.",
            userPrompt: shorterPrompt
        )
        
        return response.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)
    }
    
    private func generateText(for request: GenerationRequest, existingTitles: [String]) async throws -> String {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏—Ä—É—Å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ engagement
        let systemPrompt = ViralPromptBuilder.buildEnhancedSystemPrompt()
        let userPrompt = ViralPromptBuilder.buildViralUserPrompt(
            for: request,
            optimizer: viralOptimizer,
            existingTitles: existingTitles
        )
        
        logger.info("üî• –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π")
        
        return try await aiClient.generateText(
            systemPrompt: systemPrompt,
            userPrompt: userPrompt
        )
    }
    
    private func generateImages(prompts: [String]) async throws -> [String] {
        var urls: [String] = []
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–µ—Ä–≤–æ–µ –∏–∑ –ø—Ä–æ–º–ø—Ç–æ–≤)
        for prompt in prompts.prefix(1) {
            do {
                let url = try await aiClient.generateImage(prompt: prompt)
                urls.append(url)
            } catch {
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: \(error)")
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º placeholder –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
                urls.append("https://via.placeholder.com/1792x1024?text=Travel+Image")
            }
        }
        
        return urls
    }
    
    private func estimateCost(textTokens: Int, images: Int) -> Double {
        // Claude Sonnet 4.5: ~$3.00 per 1M input, ~$15.00 per 1M output
        let textCost = (Double(textTokens) / 1_000_000.0) * 9.0 // average
        
        // Stability AI Core: ~$0.03 per image
        let imageCost = Double(images) * 0.03
        
        return textCost + imageCost
    }
    
    /// –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç —Å –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω–æ–π —á–µ—Ä–µ–∑ Claude
    func regenerateShortPost(
        fullPost: String,
        currentShortPost: String,
        targetLength: Int
    ) async throws -> String {
        logger.info("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—é –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç (—Ü–µ–ª—å: \(targetLength) —Å–∏–º–≤–æ–ª–æ–≤, —Ç–µ–∫—É—â–∏–π: \(currentShortPost.count))")
        
        let systemPrompt = """
        –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏—Ä—É—Å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è Telegram –∏ –Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω.
        
        –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ú–ê–ö–°–ò–ú–£–ú \(targetLength) –°–ò–ú–í–û–õ–û–í!
        
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞: —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–π –ø–æ—Å—Ç –¥–æ \(targetLength) —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω–∏–≤:
        - –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–¥–æ —Ç–æ—á–∫–∏) –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –î–∑–µ–Ω–∞ (–º–∞–∫—Å 140 —Å–∏–º–≤–æ–ª–æ–≤)
        - –ö–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ü–µ–Ω–Ω–æ—Å—Ç—å
        - –í–∏—Ä—É—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
        - –≠–º–æ–¥–∑–∏ (–Ω–µ –±–æ–ª—å—à–µ 3-4)
        
        –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:
        - –ú–ê–ö–°–ò–ú–£–ú \(targetLength) —Å–∏–º–≤–æ–ª–æ–≤ (—Å—á–∏—Ç–∞–π –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª!)
        - –õ—É—á—à–µ –∫–æ—Ä–æ—á–µ, —á–µ–º –¥–ª–∏–Ω–Ω–µ–µ
        - –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º
        - –ë–µ–∑ –æ–±—Ä–µ–∑–∫–∏ —Å–ª–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        - –£–±–∏—Ä–∞–π –ª–∏—à–Ω–∏–µ –¥–µ—Ç–∞–ª–∏, –æ—Å—Ç–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–µ
        """
        
        let userPrompt = """
        –ü–û–õ–ù–´–ô –ü–û–°–¢ (\(fullPost.count) —Å–∏–º–≤–æ–ª–æ–≤):
        \(fullPost)
        
        –¢–ï–ö–£–©–ò–ô –ö–û–†–û–¢–ö–ò–ô –ü–û–°–¢ (\(currentShortPost.count) —Å–∏–º–≤–æ–ª–æ–≤):
        \(currentShortPost)
        
        –°–æ–∑–¥–∞–π –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª–∏–Ω–æ–π –¥–æ \(targetLength) —Å–∏–º–≤–æ–ª–æ–≤.
        –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –±–µ–∑ JSON –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
        """
        
        let response = try await aiClient.generateText(
            systemPrompt: systemPrompt,
            userPrompt: userPrompt
        )
        
        // –û—á–∏—â–∞–µ–º –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö markdown –±–ª–æ–∫–æ–≤
        let cleanedResponse = response
            .replacingOccurrences(of: "```json", with: "")
            .replacingOccurrences(of: "```", with: "")
            .trimmingCharacters(in: .whitespacesAndNewlines)
        
        logger.info("‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω: \(cleanedResponse.count) —Å–∏–º–≤–æ–ª–æ–≤")
        
        return cleanedResponse
    }
}

// MARK: - Helper Extensions

extension Array {
    subscript(safe index: Int) -> Element? {
        indices.contains(index) ? self[index] : nil
    }
}

// MARK: - Generation Log Model

final class GenerationLogModel: Model, Content {
    static let schema = "generation_logs"
    
    @ID(key: .id)
    var id: UUID?
    
    @Parent(key: "post_id")
    var post: ZenPostModel
    
    @Field(key: "step")
    var step: String
    
    @Field(key: "status")
    var status: String
    
    @OptionalField(key: "error_message")
    var errorMessage: String?
    
    @OptionalField(key: "duration_ms")
    var durationMs: Int?
    
    @OptionalField(key: "cost_usd")
    var costUsd: Double?
    
    @Timestamp(key: "created_at", on: .create)
    var createdAt: Date?
    
    init() {}
    
    init(
        id: UUID? = nil,
        postId: UUID,
        step: String,
        status: String,
        errorMessage: String? = nil,
        durationMs: Int? = nil,
        costUsd: Double? = nil
    ) {
        self.id = id
        self.$post.id = postId
        self.step = step
        self.status = status
        self.errorMessage = errorMessage
        self.durationMs = durationMs
        self.costUsd = costUsd
    }
}

