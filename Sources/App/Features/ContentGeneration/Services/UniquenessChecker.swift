import Foundation
import Vapor
import Fluent

/// –°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
final class UniquenessChecker {
    private let db: Database
    private let logger: Logger
    
    init(db: Database, logger: Logger) {
        self.db = db
        self.logger = logger
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –ø—Ä–æ—Ç–∏–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
    func checkUniqueness(
        title: String,
        content: String,
        category: PostCategory,
        topic: String
    ) async throws -> UniquenessResult {
        
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞: \(title)")
        
        // 1. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ—Å—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        let thirtyDaysAgo = Calendar.current.date(byAdding: .day, value: -30, to: Date()) ?? Date()
        
        let recentPosts = try await ZenPostModel.query(on: db)
            .filter(\.$createdAt >= thirtyDaysAgo)
            .all()
        
        logger.info("üìö –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ 30 –¥–Ω–µ–π: \(recentPosts.count)")
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ —Å—Ö–æ–∂–µ—Å—Ç—å
        let titleSimilarity = checkTitleSimilarity(title: title, existingPosts: recentPosts)
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å—Ö–æ–∂–µ—Å—Ç—å
        let contentSimilarity = checkContentSimilarity(content: content, existingPosts: recentPosts)
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        let topicDuplication = checkTopicDuplication(topic: topic, category: category, existingPosts: recentPosts)
        
        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        let seasonalRestriction = checkSeasonalRestrictions(topic: topic, category: category, existingPosts: recentPosts)
        
        // 6. –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        let overallScore = calculateUniquenessScore(
            titleSimilarity: titleSimilarity,
            contentSimilarity: contentSimilarity,
            topicDuplication: topicDuplication,
            seasonalRestriction: seasonalRestriction
        )
        
        let isUnique = overallScore >= 0.7 // –ü–æ—Ä–æ–≥ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ 70%
        
        let recommendations = generateRecommendations(
            titleSimilarity: titleSimilarity,
            contentSimilarity: contentSimilarity,
            topicDuplication: topicDuplication,
            seasonalRestriction: seasonalRestriction
        )
        
        logger.info("‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: \(String(format: "%.1f%%", overallScore * 100))")
        
        return UniquenessResult(
            isUnique: isUnique,
            score: overallScore,
            titleSimilarity: titleSimilarity,
            contentSimilarity: contentSimilarity,
            topicDuplication: topicDuplication,
            seasonalRestriction: seasonalRestriction,
            recommendations: recommendations
        )
    }
    
    // MARK: - Private Methods
    
    private func checkTitleSimilarity(title: String, existingPosts: [ZenPostModel]) -> Double {
        let titleWords = Set(title.lowercased().components(separatedBy: .whitespacesAndPunctuation))
        
        var maxSimilarity: Double = 0
        
        for post in existingPosts {
            let existingWords = Set(post.title.lowercased().components(separatedBy: .whitespacesAndPunctuation))
            
            // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ñ–∞–∫–∫–∞—Ä–∞
            let intersection = titleWords.intersection(existingWords)
            let union = titleWords.union(existingWords)
            
            let similarity = union.isEmpty ? 0 : Double(intersection.count) / Double(union.count)
            maxSimilarity = max(maxSimilarity, similarity)
        }
        
        return maxSimilarity
    }
    
    private func checkContentSimilarity(content: String, existingPosts: [ZenPostModel]) -> Double {
        let contentWords = Set(content.lowercased().components(separatedBy: .whitespacesAndPunctuation))
        
        var maxSimilarity: Double = 0
        
        for post in existingPosts {
            let existingWords = Set(post.fullPost?.lowercased().components(separatedBy: .whitespacesAndPunctuation) ?? [])
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π
            if existingWords.count < 50 { continue }
            
            let intersection = contentWords.intersection(existingWords)
            let union = contentWords.union(existingWords)
            
            let similarity = union.isEmpty ? 0 : Double(intersection.count) / Double(union.count)
            maxSimilarity = max(maxSimilarity, similarity)
        }
        
        return maxSimilarity
    }
    
    private func checkTopicDuplication(topic: String, category: PostCategory, existingPosts: [ZenPostModel]) -> Double {
        let recentPostsInCategory = existingPosts.filter { $0.templateType == category.rawValue }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ç–µ–º—ã –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let topicWords = Set(topic.lowercased().components(separatedBy: .whitespacesAndPunctuation))
        
        var duplicationCount = 0
        
        for post in recentPostsInCategory {
            let postTitleWords = Set(post.title.lowercased().components(separatedBy: .whitespacesAndPunctuation))
            let intersection = topicWords.intersection(postTitleWords)
            
            // –ï—Å–ª–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ 50% —Å–ª–æ–≤ - —Å—á–∏—Ç–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            if Double(intersection.count) / Double(topicWords.count) > 0.5 {
                duplicationCount += 1
            }
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (0 = –Ω–µ—Ç –¥—É–±–ª–µ–π, 1 = –º–Ω–æ–≥–æ –¥—É–±–ª–µ–π)
        return min(1.0, Double(duplicationCount) / 3.0) // –ú–∞–∫—Å–∏–º—É–º 3 –¥—É–±–ª—è = 100%
    }
    
    private func checkSeasonalRestrictions(topic: String, category: PostCategory, existingPosts: [ZenPostModel]) -> Double {
        let _ = Calendar.current.component(.month, from: Date())
        
        // –°–µ–∑–æ–Ω–Ω—ã–µ —Ç–µ–º—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 2 –º–µ—Å—è—Ü–∞
        let seasonalTopics = [
            "–∑–∏–º–Ω–∏–π –æ—Ç–¥—ã—Ö", "–ª–µ—Ç–Ω–∏–π –æ—Ç–¥—ã—Ö", "–≤–µ—Å–µ–Ω–Ω–∏–π –æ—Ç–¥—ã—Ö", "–æ—Å–µ–Ω–Ω–∏–π –æ—Ç–¥—ã—Ö",
            "–Ω–æ–≤—ã–π –≥–æ–¥", "–º–∞–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏", "–±–∞—Ä—Ö–∞—Ç–Ω—ã–π —Å–µ–∑–æ–Ω"
        ]
        
        let isSeasonalTopic = seasonalTopics.contains { topic.lowercased().contains($0) }
        
        if !isSeasonalTopic { return 0.0 }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –ø–æ—Ö–æ–∂–∞—è —Å–µ–∑–æ–Ω–Ω–∞—è —Ç–µ–º–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–µ—Å—è—Ü–∞
        let twoMonthsAgo = Calendar.current.date(byAdding: .month, value: -2, to: Date()) ?? Date()
        
        let recentSeasonalPosts = existingPosts.filter { post in
            guard let createdAt = post.createdAt else { return false }
            return createdAt >= twoMonthsAgo && 
                   seasonalTopics.contains { post.title.lowercased().contains($0) }
        }
        
        return recentSeasonalPosts.isEmpty ? 0.0 : 0.8
    }
    
    private func calculateUniquenessScore(
        titleSimilarity: Double,
        contentSimilarity: Double,
        topicDuplication: Double,
        seasonalRestriction: Double
    ) -> Double {
        // –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–≤–µ—Ä–æ–∫
        let titleWeight = 0.3
        let contentWeight = 0.4
        let topicWeight = 0.2
        let seasonalWeight = 0.1
        
        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É (—á–µ–º –º–µ–Ω—å—à–µ —Å—Ö–æ–∂–µ—Å—Ç–∏, —Ç–µ–º –≤—ã—à–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å)
        let score = (1.0 - titleSimilarity) * titleWeight +
                   (1.0 - contentSimilarity) * contentWeight +
                   (1.0 - topicDuplication) * topicWeight +
                   (1.0 - seasonalRestriction) * seasonalWeight
        
        return max(0.0, min(1.0, score))
    }
    
    private func generateRecommendations(
        titleSimilarity: Double,
        contentSimilarity: Double,
        topicDuplication: Double,
        seasonalRestriction: Double
    ) -> [String] {
        var recommendations: [String] = []
        
        if titleSimilarity > 0.6 {
            recommendations.append("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ. –ò–∑–º–µ–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∏–ª–∏ —É–≥–æ–ª –ø–æ–¥–∞—á–∏.")
        }
        
        if contentSimilarity > 0.5 {
            recommendations.append("–ö–æ–Ω—Ç–µ–Ω—Ç –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫—É—é —Å—Ö–æ–∂–µ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–æ—Å—Ç–∞–º–∏. –î–æ–±–∞–≤—å—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –ª–∏—á–Ω—ã–π –æ–ø—ã—Ç.")
        }
        
        if topicDuplication > 0.5 {
            recommendations.append("–¢–µ–º–∞ —É–∂–µ –Ω–µ–¥–∞–≤–Ω–æ –æ—Å–≤–µ—â–∞–ª–∞—Å—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞—Å–ø–µ–∫—Ç –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –Ω–µ–¥–µ–ª–∏.")
        }
        
        if seasonalRestriction > 0.5 {
            recommendations.append("–°–µ–∑–æ–Ω–Ω–∞—è —Ç–µ–º–∞ –Ω–µ–¥–∞–≤–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∞—Å—å. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å–µ–∑–æ–Ω–Ω—É—é —Ç–µ–º—É –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        }
        
        if recommendations.isEmpty {
            recommendations.append("–ü–æ—Å—Ç —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!")
        }
        
        return recommendations
    }
}

// MARK: - Models

struct UniquenessResult {
    let isUnique: Bool
    let score: Double // 0.0 - 1.0
    let titleSimilarity: Double
    let contentSimilarity: Double
    let topicDuplication: Double
    let seasonalRestriction: Double
    let recommendations: [String]
}

// MARK: - Extensions

extension CharacterSet {
    static let whitespacesAndPunctuation = CharacterSet.whitespacesAndNewlines
        .union(.punctuationCharacters)
}
