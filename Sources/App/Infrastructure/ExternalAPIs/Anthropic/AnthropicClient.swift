import Vapor

protocol AIClientProtocol {
    func generateText(systemPrompt: String, userPrompt: String) async throws -> String
    func generateImage(prompt: String) async throws -> String
}

final class AnthropicClient: AIClientProtocol {
    private let client: Client
    private let apiKey: String
    private let baseURL = "https://api.anthropic.com/v1"
    private let model: String
    private let logger: Logger
    
    init(client: Client, logger: Logger = Logger(label: "anthropic-client")) {
        self.client = client
        self.apiKey = AppConfig.anthropicKey
        self.model = AppConfig.anthropicModel
        self.logger = logger
    }
    
    func generateText(systemPrompt: String, userPrompt: String) async throws -> String {
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø—Ä–æ—Å –∫ Claude API")
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤
        let totalPromptSize = systemPrompt.count + userPrompt.count
        logger.info("üìä –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤: system=\(systemPrompt.count), user=\(userPrompt.count), total=\(totalPromptSize)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±–æ–ª—å—à–æ–π –ø—Ä–æ–º–ø—Ç
        if totalPromptSize > 150000 {
            logger.error("‚ùå –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: \(totalPromptSize) —Å–∏–º–≤–æ–ª–æ–≤")
            throw Abort(.badRequest, reason: "–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: \(totalPromptSize) —Å–∏–º–≤–æ–ª–æ–≤")
        }
        
        let url = URI(string: "\(baseURL)/messages")
        logger.info("üîó URL: \(url)")
        
        var request = ClientRequest(method: .POST, url: url)
        request.headers.add(name: "x-api-key", value: apiKey) // –ü–æ–ª–Ω—ã–π –∫–ª—é—á!
        request.headers.add(name: "anthropic-version", value: "2025-01-22")
        request.headers.add(name: .contentType, value: "application/json")
        
        logger.info("üìã Headers: x-api-key=\(String(apiKey.prefix(10)))..., anthropic-version=2025-01-22")
        logger.info("ü§ñ Model: \(model)")
        logger.info("‚öôÔ∏è max_tokens: \(AppConfig.maxTokens), temperature: \(AppConfig.temperature)")
        
        let requestBody: [String: Any] = [
            "model": model,
            "max_tokens": AppConfig.maxTokens,
            "temperature": AppConfig.temperature,
            "system": systemPrompt,
            "messages": [
                ["role": "user", "content": userPrompt]
            ]
        ]
        
        do {
            let data = try JSONSerialization.data(withJSONObject: requestBody)
            request.body = .init(data: data)
            
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Claude API...")
            logger.info("üì¶ –†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: \(data.count) –±–∞–π—Ç")
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ system prompt –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info("üìù System prompt (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): \(systemPrompt.prefix(500))...")
            logger.info("üìù User prompt (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): \(userPrompt.prefix(500))...")
            
            let response = try await client.send(request)
            
            logger.info("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: status=\(response.status.code)")
            
            guard response.status == .ok else {
                // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
                let errorBody = response.body.map { String(buffer: $0) } ?? "No error body"
                logger.error("‚ùå Claude API –æ—à–∏–±–∫–∞!")
                logger.error("   Status: \(response.status.code) \(response.status.reasonPhrase)")
                logger.error("   Headers: \(response.headers)")
                logger.error("   Body: \(errorBody)")
                
                throw Abort(.internalServerError, reason: "Anthropic API error: \(response.status) - \(errorBody)")
            }
            
            struct AnthropicResponse: Codable {
                let content: [ContentBlock]
                let usage: Usage?
                
                struct ContentBlock: Codable {
                    let type: String
                    let text: String?
                }
                
                struct Usage: Codable {
                    let inputTokens: Int
                    let outputTokens: Int
                    
                    enum CodingKeys: String, CodingKey {
                        case inputTokens = "input_tokens"
                        case outputTokens = "output_tokens"
                    }
                }
            }
            
            let anthropicResponse = try response.content.decode(AnthropicResponse.self)
            
            // –õ–æ–≥–∏—Ä—É–µ–º usage
            if let usage = anthropicResponse.usage {
                logger.info("üìä Tokens used: input=\(usage.inputTokens), output=\(usage.outputTokens)")
            }
            
            // –ò—â–µ–º –ø–µ—Ä–≤—ã–π text –±–ª–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
            let textBlock = anthropicResponse.content.first { $0.type == "text" }
            
            guard let text = textBlock?.text else {
                logger.error("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ!")
                logger.error("   Content blocks: \(anthropicResponse.content)")
                throw Abort(.internalServerError, reason: "No text content in Claude response")
            }
            
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: \(text.count) —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info("üìù –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: \(text.prefix(300))...")
            
            return text
            
        } catch let error as Abort {
            logger.error("‚ùå Abort error: \(error.reason)")
            throw error
        } catch {
            logger.error("‚ùå Unexpected error: \(error)")
            logger.error("   Error type: \(type(of: error))")
            logger.error("   Error description: \(error.localizedDescription)")
            throw Abort(.internalServerError, reason: "Claude API request failed: \(error.localizedDescription)")
        }
    }
    
    func generateImage(prompt: String) async throws -> String {
        // Anthropic –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º Stability AI
        let stabilityClient = StabilityAIClient(client: client, apiKey: AppConfig.stabilityAIKey)
        return try await stabilityClient.generateImage(prompt: prompt)
    }
}


