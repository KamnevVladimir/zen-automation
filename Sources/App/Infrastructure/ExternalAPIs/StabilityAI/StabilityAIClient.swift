import Vapor
import Foundation

// Stability AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
final class StabilityAIClient {
    private let client: Client
    private let apiKey: String
    private let uploadService: ImageUploadServiceProtocol
    private let baseURL = "https://api.stability.ai/v2beta"
    private let logger = Logger(label: "stability-client")
    
    init(client: Client, apiKey: String, uploadService: ImageUploadServiceProtocol) {
        self.client = client
        self.apiKey = apiKey
        self.uploadService = uploadService
    }
    
    func generateImage(prompt: String) async throws -> String {
        logger.info("üé® –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stability AI")
        logger.info("üìù Prompt: \(prompt.prefix(200))...")
        
        let url = URI(string: "\(baseURL)/stable-image/generate/core")
        logger.info("üîó URL: \(url)")
        
        // –°–æ–∑–¥–∞—ë–º multipart/form-data –∑–∞–ø—Ä–æ—Å
        let boundary = "Boundary-\(UUID().uuidString)"
        var request = ClientRequest(method: .POST, url: url)
        request.headers.add(name: .authorization, value: "Bearer \(apiKey)")
        request.headers.add(name: .contentType, value: "multipart/form-data; boundary=\(boundary)")
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º multipart body
        var body = ""
        
        // –î–æ–±–∞–≤–ª—è–µ–º prompt
        body += "--\(boundary)\r\n"
        body += "Content-Disposition: form-data; name=\"prompt\"\r\n\r\n"
        body += "\(prompt)\r\n"
        
        // –î–æ–±–∞–≤–ª—è–µ–º output_format
        body += "--\(boundary)\r\n"
        body += "Content-Disposition: form-data; name=\"output_format\"\r\n\r\n"
        body += "png\r\n"
        
        // –î–æ–±–∞–≤–ª—è–µ–º aspect_ratio
        body += "--\(boundary)\r\n"
        body += "Content-Disposition: form-data; name=\"aspect_ratio\"\r\n\r\n"
        body += "16:9\r\n"
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º multipart
        body += "--\(boundary)--\r\n"
        
        request.body = .init(string: body)
        
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Stability AI...")
        let response = try await client.send(request)
        
        logger.info("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: status=\(response.status.code)")
        
        guard response.status == .ok else {
            let errorBody = response.body.map { String(buffer: $0) } ?? "No error body"
            logger.error("‚ùå Stability AI –æ—à–∏–±–∫–∞!")
            logger.error("   Status: \(response.status.code) \(response.status.reasonPhrase)")
            logger.error("   Body: \(errorBody)")
            throw Abort(.internalServerError, reason: "Stability AI error: \(response.status) - \(errorBody)")
        }
        
        // Stability AI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç binary –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        guard let imageData = response.body else {
            logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ!")
            throw Abort(.internalServerError, reason: "No image data in Stability AI response")
        }
        
        let imageBytes = Data(buffer: imageData)
        
        logger.info("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        logger.info("üì¶ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(imageBytes.count) –±–∞–π—Ç")
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Telegraph –∏ –ø–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        let publicURL = try await uploadService.uploadImage(data: imageBytes, format: .png)
        logger.info("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ Telegraph: \(publicURL)")
        
        return publicURL
    }
}

