import Vapor
import Foundation

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–µ —Ö–æ—Å—Ç–∏–Ω–≥–∏
protocol ImageUploadServiceProtocol {
    func uploadImage(data: Data, format: ImageFormat) async throws -> String
}

enum ImageFormat: String {
    case png
    case jpeg
    
    var mimeType: String {
        switch self {
        case .png: return "image/png"
        case .jpeg: return "image/jpeg"
        }
    }
    
    var fileExtension: String {
        rawValue
    }
}

/// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Telegraph (telegra.ph/upload)
/// Telegraph API –±–µ—Å–ø–ª–∞—Ç–µ–Ω –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∫–ª—é—á–∞
final class TelegraphImageUploadService: ImageUploadServiceProtocol {
    private let client: Client
    private let logger: Logger
    private let uploadURL = "https://telegra.ph/upload"
    
    init(client: Client, logger: Logger) {
        self.client = client
        self.logger = logger
    }
    
    func uploadImage(data: Data, format: ImageFormat) async throws -> String {
        logger.info("üì§ –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ Telegraph (\(data.count) –±–∞–π—Ç)")
        
        let boundary = "Boundary-\(UUID().uuidString)"
        let url = URI(string: uploadURL)
        
        var request = ClientRequest(method: .POST, url: url)
        request.headers.add(name: .contentType, value: "multipart/form-data; boundary=\(boundary)")
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º multipart/form-data body
        var body = Data()
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        let fileName = "image.\(format.fileExtension)"
        let fieldName = "file"
        
        // –ù–∞—á–∞–ª–æ boundary
        body.append("--\(boundary)\r\n".data(using: .utf8)!)
        body.append("Content-Disposition: form-data; name=\"\(fieldName)\"; filename=\"\(fileName)\"\r\n".data(using: .utf8)!)
        body.append("Content-Type: \(format.mimeType)\r\n\r\n".data(using: .utf8)!)
        
        // –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
        body.append(data)
        body.append("\r\n".data(using: .utf8)!)
        
        // –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π boundary
        body.append("--\(boundary)--\r\n".data(using: .utf8)!)
        
        request.body = .init(data: body)
        
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ Telegraph...")
        let response = try await client.send(request)
        
        logger.info("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: status=\(response.status.code)")
        
        guard response.status == .ok else {
            let errorBody = response.body.map { String(buffer: $0) } ?? "No error body"
            logger.error("‚ùå Telegraph upload error!")
            logger.error("   Status: \(response.status.code) \(response.status.reasonPhrase)")
            logger.error("   Body: \(errorBody)")
            throw Abort(.internalServerError, reason: "Telegraph upload failed: \(response.status)")
        }
        
        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        guard let responseBody = response.body else {
            logger.error("‚ùå –ù–µ—Ç —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegraph!")
            throw Abort(.internalServerError, reason: "No response body from Telegraph")
        }
        
        // Telegraph –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: [{"src":"/file/abc123.png"}]
        let responseData = Data(buffer: responseBody)
        
        guard let json = try? JSONSerialization.jsonObject(with: responseData) as? [[String: Any]],
              let firstItem = json.first,
              let src = firstItem["src"] as? String else {
            let bodyString = String(data: responseData, encoding: .utf8) ?? "Cannot decode"
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç Telegraph: \(bodyString)")
            throw Abort(.internalServerError, reason: "Invalid Telegraph response format")
        }
        
        // Telegraph –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω
        let fullURL = "https://telegra.ph\(src)"
        
        logger.info("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: \(fullURL)")
        
        return fullURL
    }
}

